<?php

declare(strict_types=1);

/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PagarmeApiSDKLib\Models;

use stdClass;

/**
 * The settings for creating a private label payment
 */
class CreatePrivateLabelPaymentRequest implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $installments = 1;

    /**
     * @var string|null
     */
    private $statementDescriptor;

    /**
     * @var CreateCardRequest|null
     */
    private $card;

    /**
     * @var string|null
     */
    private $cardId;

    /**
     * @var string|null
     */
    private $cardToken;

    /**
     * @var bool|null
     */
    private $recurrence;

    /**
     * @var bool|null
     */
    private $capture = true;

    /**
     * @var bool|null
     */
    private $extendedLimitEnabled;

    /**
     * @var string|null
     */
    private $extendedLimitCode;

    /**
     * @var string|null
     */
    private $recurrencyCycle;

    /**
     * Returns Installments.
     * Number of installments
     */
    public function getInstallments(): ?int
    {
        return $this->installments;
    }

    /**
     * Sets Installments.
     * Number of installments
     *
     * @maps installments
     */
    public function setInstallments(?int $installments): void
    {
        $this->installments = $installments;
    }

    /**
     * Returns Statement Descriptor.
     * The text that will be shown on the private label's statement
     */
    public function getStatementDescriptor(): ?string
    {
        return $this->statementDescriptor;
    }

    /**
     * Sets Statement Descriptor.
     * The text that will be shown on the private label's statement
     *
     * @maps statement_descriptor
     */
    public function setStatementDescriptor(?string $statementDescriptor): void
    {
        $this->statementDescriptor = $statementDescriptor;
    }

    /**
     * Returns Card.
     * Card data
     */
    public function getCard(): ?CreateCardRequest
    {
        return $this->card;
    }

    /**
     * Sets Card.
     * Card data
     *
     * @maps card
     */
    public function setCard(?CreateCardRequest $card): void
    {
        $this->card = $card;
    }

    /**
     * Returns Card Id.
     * The Card id
     */
    public function getCardId(): ?string
    {
        return $this->cardId;
    }

    /**
     * Sets Card Id.
     * The Card id
     *
     * @maps card_id
     */
    public function setCardId(?string $cardId): void
    {
        $this->cardId = $cardId;
    }

    /**
     * Returns Card Token.
     */
    public function getCardToken(): ?string
    {
        return $this->cardToken;
    }

    /**
     * Sets Card Token.
     *
     * @maps card_token
     */
    public function setCardToken(?string $cardToken): void
    {
        $this->cardToken = $cardToken;
    }

    /**
     * Returns Recurrence.
     * Indicates a recurrence
     */
    public function getRecurrence(): ?bool
    {
        return $this->recurrence;
    }

    /**
     * Sets Recurrence.
     * Indicates a recurrence
     *
     * @maps recurrence
     */
    public function setRecurrence(?bool $recurrence): void
    {
        $this->recurrence = $recurrence;
    }

    /**
     * Returns Capture.
     * Indicates if the operation should be only authorization or auth and capture.
     */
    public function getCapture(): ?bool
    {
        return $this->capture;
    }

    /**
     * Sets Capture.
     * Indicates if the operation should be only authorization or auth and capture.
     *
     * @maps capture
     */
    public function setCapture(?bool $capture): void
    {
        $this->capture = $capture;
    }

    /**
     * Returns Extended Limit Enabled.
     * Indicates whether the extended label (private label) is enabled
     */
    public function getExtendedLimitEnabled(): ?bool
    {
        return $this->extendedLimitEnabled;
    }

    /**
     * Sets Extended Limit Enabled.
     * Indicates whether the extended label (private label) is enabled
     *
     * @maps extended_limit_enabled
     */
    public function setExtendedLimitEnabled(?bool $extendedLimitEnabled): void
    {
        $this->extendedLimitEnabled = $extendedLimitEnabled;
    }

    /**
     * Returns Extended Limit Code.
     * Extended Limit Code
     */
    public function getExtendedLimitCode(): ?string
    {
        return $this->extendedLimitCode;
    }

    /**
     * Sets Extended Limit Code.
     * Extended Limit Code
     *
     * @maps extended_limit_code
     */
    public function setExtendedLimitCode(?string $extendedLimitCode): void
    {
        $this->extendedLimitCode = $extendedLimitCode;
    }

    /**
     * Returns Recurrency Cycle.
     * Defines whether the card has been used one or more times.
     */
    public function getRecurrencyCycle(): ?string
    {
        return $this->recurrencyCycle;
    }

    /**
     * Sets Recurrency Cycle.
     * Defines whether the card has been used one or more times.
     *
     * @maps recurrency_cycle
     */
    public function setRecurrencyCycle(?string $recurrencyCycle): void
    {
        $this->recurrencyCycle = $recurrencyCycle;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->installments)) {
            $json['installments']           = $this->installments;
        }
        if (isset($this->statementDescriptor)) {
            $json['statement_descriptor']   = $this->statementDescriptor;
        }
        if (isset($this->card)) {
            $json['card']                   = $this->card;
        }
        if (isset($this->cardId)) {
            $json['card_id']                = $this->cardId;
        }
        if (isset($this->cardToken)) {
            $json['card_token']             = $this->cardToken;
        }
        if (isset($this->recurrence)) {
            $json['recurrence']             = $this->recurrence;
        }
        if (isset($this->capture)) {
            $json['capture']                = $this->capture;
        }
        if (isset($this->extendedLimitEnabled)) {
            $json['extended_limit_enabled'] = $this->extendedLimitEnabled;
        }
        if (isset($this->extendedLimitCode)) {
            $json['extended_limit_code']    = $this->extendedLimitCode;
        }
        if (isset($this->recurrencyCycle)) {
            $json['recurrency_cycle']       = $this->recurrencyCycle;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
