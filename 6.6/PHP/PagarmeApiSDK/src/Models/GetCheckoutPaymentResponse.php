<?php

declare(strict_types=1);

/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PagarmeApiSDKLib\Models;

use PagarmeApiSDKLib\Utils\DateTimeHelper;
use stdClass;

/**
 * Resposta das configurações de pagamento do checkout
 */
class GetCheckoutPaymentResponse implements \JsonSerializable
{
    /**
     * @var string
     */
    private $id;

    /**
     * @var int|null
     */
    private $amount;

    /**
     * @var string
     */
    private $defaultPaymentMethod;

    /**
     * @var string
     */
    private $successUrl;

    /**
     * @var string
     */
    private $paymentUrl;

    /**
     * @var string
     */
    private $gatewayAffiliationId;

    /**
     * @var string[]
     */
    private $acceptedPaymentMethods;

    /**
     * @var string
     */
    private $status;

    /**
     * @var bool
     */
    private $skipCheckoutSuccessPage;

    /**
     * @var \DateTime
     */
    private $createdAt;

    /**
     * @var \DateTime
     */
    private $updatedAt;

    /**
     * @var \DateTime|null
     */
    private $canceledAt;

    /**
     * @var bool
     */
    private $customerEditable;

    /**
     * @var GetCustomerResponse|null
     */
    private $customer;

    /**
     * @var GetAddressResponse
     */
    private $billingaddress;

    /**
     * @var GetCheckoutCreditCardPaymentResponse
     */
    private $creditCard;

    /**
     * @var GetCheckoutBoletoPaymentResponse
     */
    private $boleto;

    /**
     * @var bool
     */
    private $billingAddressEditable;

    /**
     * @var GetShippingResponse
     */
    private $shipping;

    /**
     * @var bool
     */
    private $shippable;

    /**
     * @var \DateTime|null
     */
    private $closedAt;

    /**
     * @var \DateTime|null
     */
    private $expiresAt;

    /**
     * @var string
     */
    private $currency;

    /**
     * @var GetCheckoutDebitCardPaymentResponse|null
     */
    private $debitCard;

    /**
     * @var GetCheckoutBankTransferPaymentResponse|null
     */
    private $bankTransfer;

    /**
     * @var string[]
     */
    private $acceptedBrands;

    /**
     * @var GetCheckoutPixPaymentResponse|null
     */
    private $pix;

    /**
     * @param string $id
     * @param string $defaultPaymentMethod
     * @param string $successUrl
     * @param string $paymentUrl
     * @param string $gatewayAffiliationId
     * @param string[] $acceptedPaymentMethods
     * @param string $status
     * @param bool $skipCheckoutSuccessPage
     * @param \DateTime $createdAt
     * @param \DateTime $updatedAt
     * @param bool $customerEditable
     * @param GetAddressResponse $billingaddress
     * @param GetCheckoutCreditCardPaymentResponse $creditCard
     * @param GetCheckoutBoletoPaymentResponse $boleto
     * @param bool $billingAddressEditable
     * @param GetShippingResponse $shipping
     * @param bool $shippable
     * @param string $currency
     * @param string[] $acceptedBrands
     */
    public function __construct(
        string $id,
        string $defaultPaymentMethod,
        string $successUrl,
        string $paymentUrl,
        string $gatewayAffiliationId,
        array $acceptedPaymentMethods,
        string $status,
        bool $skipCheckoutSuccessPage,
        \DateTime $createdAt,
        \DateTime $updatedAt,
        bool $customerEditable,
        GetAddressResponse $billingaddress,
        GetCheckoutCreditCardPaymentResponse $creditCard,
        GetCheckoutBoletoPaymentResponse $boleto,
        bool $billingAddressEditable,
        GetShippingResponse $shipping,
        bool $shippable,
        string $currency,
        array $acceptedBrands
    ) {
        $this->id = $id;
        $this->defaultPaymentMethod = $defaultPaymentMethod;
        $this->successUrl = $successUrl;
        $this->paymentUrl = $paymentUrl;
        $this->gatewayAffiliationId = $gatewayAffiliationId;
        $this->acceptedPaymentMethods = $acceptedPaymentMethods;
        $this->status = $status;
        $this->skipCheckoutSuccessPage = $skipCheckoutSuccessPage;
        $this->createdAt = $createdAt;
        $this->updatedAt = $updatedAt;
        $this->customerEditable = $customerEditable;
        $this->billingaddress = $billingaddress;
        $this->creditCard = $creditCard;
        $this->boleto = $boleto;
        $this->billingAddressEditable = $billingAddressEditable;
        $this->shipping = $shipping;
        $this->shippable = $shippable;
        $this->currency = $currency;
        $this->acceptedBrands = $acceptedBrands;
    }

    /**
     * Returns Id.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Amount.
     * Valor em centavos
     */
    public function getAmount(): ?int
    {
        return $this->amount;
    }

    /**
     * Sets Amount.
     * Valor em centavos
     *
     * @maps amount
     */
    public function setAmount(?int $amount): void
    {
        $this->amount = $amount;
    }

    /**
     * Returns Default Payment Method.
     * Meio de pagamento padrão no checkout
     */
    public function getDefaultPaymentMethod(): string
    {
        return $this->defaultPaymentMethod;
    }

    /**
     * Sets Default Payment Method.
     * Meio de pagamento padrão no checkout
     *
     * @required
     * @maps default_payment_method
     */
    public function setDefaultPaymentMethod(string $defaultPaymentMethod): void
    {
        $this->defaultPaymentMethod = $defaultPaymentMethod;
    }

    /**
     * Returns Success Url.
     * Url de redirecionamento de sucesso após o checkou
     */
    public function getSuccessUrl(): string
    {
        return $this->successUrl;
    }

    /**
     * Sets Success Url.
     * Url de redirecionamento de sucesso após o checkou
     *
     * @required
     * @maps success_url
     */
    public function setSuccessUrl(string $successUrl): void
    {
        $this->successUrl = $successUrl;
    }

    /**
     * Returns Payment Url.
     * Url para pagamento usando o checkout
     */
    public function getPaymentUrl(): string
    {
        return $this->paymentUrl;
    }

    /**
     * Sets Payment Url.
     * Url para pagamento usando o checkout
     *
     * @required
     * @maps payment_url
     */
    public function setPaymentUrl(string $paymentUrl): void
    {
        $this->paymentUrl = $paymentUrl;
    }

    /**
     * Returns Gateway Affiliation Id.
     * Código da afiliação onde o pagamento será processado no gateway
     */
    public function getGatewayAffiliationId(): string
    {
        return $this->gatewayAffiliationId;
    }

    /**
     * Sets Gateway Affiliation Id.
     * Código da afiliação onde o pagamento será processado no gateway
     *
     * @required
     * @maps gateway_affiliation_id
     */
    public function setGatewayAffiliationId(string $gatewayAffiliationId): void
    {
        $this->gatewayAffiliationId = $gatewayAffiliationId;
    }

    /**
     * Returns Accepted Payment Methods.
     * Meios de pagamento aceitos no checkout
     *
     * @return string[]
     */
    public function getAcceptedPaymentMethods(): array
    {
        return $this->acceptedPaymentMethods;
    }

    /**
     * Sets Accepted Payment Methods.
     * Meios de pagamento aceitos no checkout
     *
     * @required
     * @maps accepted_payment_methods
     *
     * @param string[] $acceptedPaymentMethods
     */
    public function setAcceptedPaymentMethods(array $acceptedPaymentMethods): void
    {
        $this->acceptedPaymentMethods = $acceptedPaymentMethods;
    }

    /**
     * Returns Status.
     * Status do checkout
     */
    public function getStatus(): string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     * Status do checkout
     *
     * @required
     * @maps status
     */
    public function setStatus(string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Skip Checkout Success Page.
     * Pular tela de sucesso pós-pagamento?
     */
    public function getSkipCheckoutSuccessPage(): bool
    {
        return $this->skipCheckoutSuccessPage;
    }

    /**
     * Sets Skip Checkout Success Page.
     * Pular tela de sucesso pós-pagamento?
     *
     * @required
     * @maps skip_checkout_success_page
     */
    public function setSkipCheckoutSuccessPage(bool $skipCheckoutSuccessPage): void
    {
        $this->skipCheckoutSuccessPage = $skipCheckoutSuccessPage;
    }

    /**
     * Returns Created At.
     * Data de criação
     */
    public function getCreatedAt(): \DateTime
    {
        return $this->createdAt;
    }

    /**
     * Sets Created At.
     * Data de criação
     *
     * @required
     * @maps created_at
     * @factory \PagarmeApiSDKLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setCreatedAt(\DateTime $createdAt): void
    {
        $this->createdAt = $createdAt;
    }

    /**
     * Returns Updated At.
     * Data de atualização
     */
    public function getUpdatedAt(): \DateTime
    {
        return $this->updatedAt;
    }

    /**
     * Sets Updated At.
     * Data de atualização
     *
     * @required
     * @maps updated_at
     * @factory \PagarmeApiSDKLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setUpdatedAt(\DateTime $updatedAt): void
    {
        $this->updatedAt = $updatedAt;
    }

    /**
     * Returns Canceled At.
     * Data de cancelamento
     */
    public function getCanceledAt(): ?\DateTime
    {
        return $this->canceledAt;
    }

    /**
     * Sets Canceled At.
     * Data de cancelamento
     *
     * @maps canceled_at
     * @factory \PagarmeApiSDKLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setCanceledAt(?\DateTime $canceledAt): void
    {
        $this->canceledAt = $canceledAt;
    }

    /**
     * Returns Customer Editable.
     * Torna o objeto customer editável
     */
    public function getCustomerEditable(): bool
    {
        return $this->customerEditable;
    }

    /**
     * Sets Customer Editable.
     * Torna o objeto customer editável
     *
     * @required
     * @maps customer_editable
     */
    public function setCustomerEditable(bool $customerEditable): void
    {
        $this->customerEditable = $customerEditable;
    }

    /**
     * Returns Customer.
     * Dados do comprador
     */
    public function getCustomer(): ?GetCustomerResponse
    {
        return $this->customer;
    }

    /**
     * Sets Customer.
     * Dados do comprador
     *
     * @maps customer
     */
    public function setCustomer(?GetCustomerResponse $customer): void
    {
        $this->customer = $customer;
    }

    /**
     * Returns Billingaddress.
     * Dados do endereço de cobrança
     */
    public function getBillingaddress(): GetAddressResponse
    {
        return $this->billingaddress;
    }

    /**
     * Sets Billingaddress.
     * Dados do endereço de cobrança
     *
     * @required
     * @maps billingaddress
     */
    public function setBillingaddress(GetAddressResponse $billingaddress): void
    {
        $this->billingaddress = $billingaddress;
    }

    /**
     * Returns Credit Card.
     * Configurações de cartão de crédito
     */
    public function getCreditCard(): GetCheckoutCreditCardPaymentResponse
    {
        return $this->creditCard;
    }

    /**
     * Sets Credit Card.
     * Configurações de cartão de crédito
     *
     * @required
     * @maps credit_card
     */
    public function setCreditCard(GetCheckoutCreditCardPaymentResponse $creditCard): void
    {
        $this->creditCard = $creditCard;
    }

    /**
     * Returns Boleto.
     * Configurações de boleto
     */
    public function getBoleto(): GetCheckoutBoletoPaymentResponse
    {
        return $this->boleto;
    }

    /**
     * Sets Boleto.
     * Configurações de boleto
     *
     * @required
     * @maps boleto
     */
    public function setBoleto(GetCheckoutBoletoPaymentResponse $boleto): void
    {
        $this->boleto = $boleto;
    }

    /**
     * Returns Billing Address Editable.
     * Indica se o billing address poderá ser editado
     */
    public function getBillingAddressEditable(): bool
    {
        return $this->billingAddressEditable;
    }

    /**
     * Sets Billing Address Editable.
     * Indica se o billing address poderá ser editado
     *
     * @required
     * @maps billing_address_editable
     */
    public function setBillingAddressEditable(bool $billingAddressEditable): void
    {
        $this->billingAddressEditable = $billingAddressEditable;
    }

    /**
     * Returns Shipping.
     * Configurações  de entrega
     */
    public function getShipping(): GetShippingResponse
    {
        return $this->shipping;
    }

    /**
     * Sets Shipping.
     * Configurações  de entrega
     *
     * @required
     * @maps shipping
     */
    public function setShipping(GetShippingResponse $shipping): void
    {
        $this->shipping = $shipping;
    }

    /**
     * Returns Shippable.
     * Indica se possui entrega
     */
    public function getShippable(): bool
    {
        return $this->shippable;
    }

    /**
     * Sets Shippable.
     * Indica se possui entrega
     *
     * @required
     * @maps shippable
     */
    public function setShippable(bool $shippable): void
    {
        $this->shippable = $shippable;
    }

    /**
     * Returns Closed At.
     * Data de fechamento
     */
    public function getClosedAt(): ?\DateTime
    {
        return $this->closedAt;
    }

    /**
     * Sets Closed At.
     * Data de fechamento
     *
     * @maps closed_at
     * @factory \PagarmeApiSDKLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setClosedAt(?\DateTime $closedAt): void
    {
        $this->closedAt = $closedAt;
    }

    /**
     * Returns Expires At.
     * Data de expiração
     */
    public function getExpiresAt(): ?\DateTime
    {
        return $this->expiresAt;
    }

    /**
     * Sets Expires At.
     * Data de expiração
     *
     * @maps expires_at
     * @factory \PagarmeApiSDKLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setExpiresAt(?\DateTime $expiresAt): void
    {
        $this->expiresAt = $expiresAt;
    }

    /**
     * Returns Currency.
     * Moeda
     */
    public function getCurrency(): string
    {
        return $this->currency;
    }

    /**
     * Sets Currency.
     * Moeda
     *
     * @required
     * @maps currency
     */
    public function setCurrency(string $currency): void
    {
        $this->currency = $currency;
    }

    /**
     * Returns Debit Card.
     * Configurações de cartão de débito
     */
    public function getDebitCard(): ?GetCheckoutDebitCardPaymentResponse
    {
        return $this->debitCard;
    }

    /**
     * Sets Debit Card.
     * Configurações de cartão de débito
     *
     * @maps debit_card
     */
    public function setDebitCard(?GetCheckoutDebitCardPaymentResponse $debitCard): void
    {
        $this->debitCard = $debitCard;
    }

    /**
     * Returns Bank Transfer.
     * Bank transfer payment response
     */
    public function getBankTransfer(): ?GetCheckoutBankTransferPaymentResponse
    {
        return $this->bankTransfer;
    }

    /**
     * Sets Bank Transfer.
     * Bank transfer payment response
     *
     * @maps bank_transfer
     */
    public function setBankTransfer(?GetCheckoutBankTransferPaymentResponse $bankTransfer): void
    {
        $this->bankTransfer = $bankTransfer;
    }

    /**
     * Returns Accepted Brands.
     * Accepted Brands
     *
     * @return string[]
     */
    public function getAcceptedBrands(): array
    {
        return $this->acceptedBrands;
    }

    /**
     * Sets Accepted Brands.
     * Accepted Brands
     *
     * @required
     * @maps accepted_brands
     *
     * @param string[] $acceptedBrands
     */
    public function setAcceptedBrands(array $acceptedBrands): void
    {
        $this->acceptedBrands = $acceptedBrands;
    }

    /**
     * Returns Pix.
     * Pix payment response
     */
    public function getPix(): ?GetCheckoutPixPaymentResponse
    {
        return $this->pix;
    }

    /**
     * Sets Pix.
     * Pix payment response
     *
     * @maps pix
     */
    public function setPix(?GetCheckoutPixPaymentResponse $pix): void
    {
        $this->pix = $pix;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['id']                         = $this->id;
        if (isset($this->amount)) {
            $json['amount']                 = $this->amount;
        }
        $json['default_payment_method']     = $this->defaultPaymentMethod;
        $json['success_url']                = $this->successUrl;
        $json['payment_url']                = $this->paymentUrl;
        $json['gateway_affiliation_id']     = $this->gatewayAffiliationId;
        $json['accepted_payment_methods']   = $this->acceptedPaymentMethods;
        $json['status']                     = $this->status;
        $json['skip_checkout_success_page'] = $this->skipCheckoutSuccessPage;
        $json['created_at']                 = DateTimeHelper::toRfc3339DateTime($this->createdAt);
        $json['updated_at']                 = DateTimeHelper::toRfc3339DateTime($this->updatedAt);
        if (isset($this->canceledAt)) {
            $json['canceled_at']            = DateTimeHelper::toRfc3339DateTime($this->canceledAt);
        }
        $json['customer_editable']          = $this->customerEditable;
        if (isset($this->customer)) {
            $json['customer']               = $this->customer;
        }
        $json['billingaddress']             = $this->billingaddress;
        $json['credit_card']                = $this->creditCard;
        $json['boleto']                     = $this->boleto;
        $json['billing_address_editable']   = $this->billingAddressEditable;
        $json['shipping']                   = $this->shipping;
        $json['shippable']                  = $this->shippable;
        if (isset($this->closedAt)) {
            $json['closed_at']              = DateTimeHelper::toRfc3339DateTime($this->closedAt);
        }
        if (isset($this->expiresAt)) {
            $json['expires_at']             = DateTimeHelper::toRfc3339DateTime($this->expiresAt);
        }
        $json['currency']                   = $this->currency;
        if (isset($this->debitCard)) {
            $json['debit_card']             = $this->debitCard;
        }
        if (isset($this->bankTransfer)) {
            $json['bank_transfer']          = $this->bankTransfer;
        }
        $json['accepted_brands']            = $this->acceptedBrands;
        if (isset($this->pix)) {
            $json['pix']                    = $this->pix;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
