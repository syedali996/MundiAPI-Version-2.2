<?php

declare(strict_types=1);

/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PagarmeApiSDKLib\Models;

use PagarmeApiSDKLib\Utils\DateTimeHelper;
use stdClass;

/**
 * Generic response object for getting a transaction.
 *
 * @discriminator transaction_type
 * @discriminatorType transaction
 */
class GetTransactionResponse implements \JsonSerializable
{
    /**
     * @var string
     */
    private $gatewayId;

    /**
     * @var int
     */
    private $amount;

    /**
     * @var string
     */
    private $status;

    /**
     * @var bool
     */
    private $success;

    /**
     * @var \DateTime
     */
    private $createdAt;

    /**
     * @var \DateTime
     */
    private $updatedAt;

    /**
     * @var int
     */
    private $attemptCount;

    /**
     * @var int
     */
    private $maxAttempts;

    /**
     * @var GetSplitResponse[]
     */
    private $splits;

    /**
     * @var \DateTime|null
     */
    private $nextAttempt;

    /**
     * @var string|null
     */
    private $transactionType;

    /**
     * @var string
     */
    private $id;

    /**
     * @var GetGatewayResponseResponse
     */
    private $gatewayResponse;

    /**
     * @var GetAntifraudResponse
     */
    private $antifraudResponse;

    /**
     * @var array<string,string>|null
     */
    private $metadata;

    /**
     * @var GetSplitResponse[]
     */
    private $split;

    /**
     * @var GetInterestResponse|null
     */
    private $interest;

    /**
     * @var GetFineResponse|null
     */
    private $fine;

    /**
     * @var int|null
     */
    private $maxDaysToPayPastDue;

    /**
     * @param string $gatewayId
     * @param int $amount
     * @param string $status
     * @param bool $success
     * @param \DateTime $createdAt
     * @param \DateTime $updatedAt
     * @param int $attemptCount
     * @param int $maxAttempts
     * @param GetSplitResponse[] $splits
     * @param string $id
     * @param GetGatewayResponseResponse $gatewayResponse
     * @param GetAntifraudResponse $antifraudResponse
     * @param GetSplitResponse[] $split
     */
    public function __construct(
        string $gatewayId,
        int $amount,
        string $status,
        bool $success,
        \DateTime $createdAt,
        \DateTime $updatedAt,
        int $attemptCount,
        int $maxAttempts,
        array $splits,
        string $id,
        GetGatewayResponseResponse $gatewayResponse,
        GetAntifraudResponse $antifraudResponse,
        array $split
    ) {
        $this->gatewayId = $gatewayId;
        $this->amount = $amount;
        $this->status = $status;
        $this->success = $success;
        $this->createdAt = $createdAt;
        $this->updatedAt = $updatedAt;
        $this->attemptCount = $attemptCount;
        $this->maxAttempts = $maxAttempts;
        $this->splits = $splits;
        $this->id = $id;
        $this->gatewayResponse = $gatewayResponse;
        $this->antifraudResponse = $antifraudResponse;
        $this->split = $split;
    }

    /**
     * Returns Gateway Id.
     * Gateway transaction id
     */
    public function getGatewayId(): string
    {
        return $this->gatewayId;
    }

    /**
     * Sets Gateway Id.
     * Gateway transaction id
     *
     * @required
     * @maps gateway_id
     */
    public function setGatewayId(string $gatewayId): void
    {
        $this->gatewayId = $gatewayId;
    }

    /**
     * Returns Amount.
     * Amount in cents
     */
    public function getAmount(): int
    {
        return $this->amount;
    }

    /**
     * Sets Amount.
     * Amount in cents
     *
     * @required
     * @maps amount
     */
    public function setAmount(int $amount): void
    {
        $this->amount = $amount;
    }

    /**
     * Returns Status.
     * Transaction status
     */
    public function getStatus(): string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     * Transaction status
     *
     * @required
     * @maps status
     */
    public function setStatus(string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Success.
     * Indicates if the transaction ocurred successfuly
     */
    public function getSuccess(): bool
    {
        return $this->success;
    }

    /**
     * Sets Success.
     * Indicates if the transaction ocurred successfuly
     *
     * @required
     * @maps success
     */
    public function setSuccess(bool $success): void
    {
        $this->success = $success;
    }

    /**
     * Returns Created At.
     * Creation date
     */
    public function getCreatedAt(): \DateTime
    {
        return $this->createdAt;
    }

    /**
     * Sets Created At.
     * Creation date
     *
     * @required
     * @maps created_at
     * @factory \PagarmeApiSDKLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setCreatedAt(\DateTime $createdAt): void
    {
        $this->createdAt = $createdAt;
    }

    /**
     * Returns Updated At.
     * Last update date
     */
    public function getUpdatedAt(): \DateTime
    {
        return $this->updatedAt;
    }

    /**
     * Sets Updated At.
     * Last update date
     *
     * @required
     * @maps updated_at
     * @factory \PagarmeApiSDKLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setUpdatedAt(\DateTime $updatedAt): void
    {
        $this->updatedAt = $updatedAt;
    }

    /**
     * Returns Attempt Count.
     * Number of attempts tried
     */
    public function getAttemptCount(): int
    {
        return $this->attemptCount;
    }

    /**
     * Sets Attempt Count.
     * Number of attempts tried
     *
     * @required
     * @maps attempt_count
     */
    public function setAttemptCount(int $attemptCount): void
    {
        $this->attemptCount = $attemptCount;
    }

    /**
     * Returns Max Attempts.
     * Max attempts
     */
    public function getMaxAttempts(): int
    {
        return $this->maxAttempts;
    }

    /**
     * Sets Max Attempts.
     * Max attempts
     *
     * @required
     * @maps max_attempts
     */
    public function setMaxAttempts(int $maxAttempts): void
    {
        $this->maxAttempts = $maxAttempts;
    }

    /**
     * Returns Splits.
     * Splits
     *
     * @return GetSplitResponse[]
     */
    public function getSplits(): array
    {
        return $this->splits;
    }

    /**
     * Sets Splits.
     * Splits
     *
     * @required
     * @maps splits
     *
     * @param GetSplitResponse[] $splits
     */
    public function setSplits(array $splits): void
    {
        $this->splits = $splits;
    }

    /**
     * Returns Next Attempt.
     * Date and time of the next attempt
     */
    public function getNextAttempt(): ?\DateTime
    {
        return $this->nextAttempt;
    }

    /**
     * Sets Next Attempt.
     * Date and time of the next attempt
     *
     * @maps next_attempt
     * @factory \PagarmeApiSDKLib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setNextAttempt(?\DateTime $nextAttempt): void
    {
        $this->nextAttempt = $nextAttempt;
    }

    /**
     * Returns Transaction Type.
     */
    public function getTransactionType(): ?string
    {
        return $this->transactionType;
    }

    /**
     * Sets Transaction Type.
     *
     * @maps transaction_type
     */
    public function setTransactionType(?string $transactionType): void
    {
        $this->transactionType = $transactionType;
    }

    /**
     * Returns Id.
     * Código da transação
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Código da transação
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Gateway Response.
     * The Gateway Response
     */
    public function getGatewayResponse(): GetGatewayResponseResponse
    {
        return $this->gatewayResponse;
    }

    /**
     * Sets Gateway Response.
     * The Gateway Response
     *
     * @required
     * @maps gateway_response
     */
    public function setGatewayResponse(GetGatewayResponseResponse $gatewayResponse): void
    {
        $this->gatewayResponse = $gatewayResponse;
    }

    /**
     * Returns Antifraud Response.
     */
    public function getAntifraudResponse(): GetAntifraudResponse
    {
        return $this->antifraudResponse;
    }

    /**
     * Sets Antifraud Response.
     *
     * @required
     * @maps antifraud_response
     */
    public function setAntifraudResponse(GetAntifraudResponse $antifraudResponse): void
    {
        $this->antifraudResponse = $antifraudResponse;
    }

    /**
     * Returns Metadata.
     *
     * @return array<string,string>|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }

    /**
     * Sets Metadata.
     *
     * @maps metadata
     *
     * @param array<string,string>|null $metadata
     */
    public function setMetadata(?array $metadata): void
    {
        $this->metadata = $metadata;
    }

    /**
     * Returns Split.
     *
     * @return GetSplitResponse[]
     */
    public function getSplit(): array
    {
        return $this->split;
    }

    /**
     * Sets Split.
     *
     * @required
     * @maps split
     *
     * @param GetSplitResponse[] $split
     */
    public function setSplit(array $split): void
    {
        $this->split = $split;
    }

    /**
     * Returns Interest.
     */
    public function getInterest(): ?GetInterestResponse
    {
        return $this->interest;
    }

    /**
     * Sets Interest.
     *
     * @maps interest
     */
    public function setInterest(?GetInterestResponse $interest): void
    {
        $this->interest = $interest;
    }

    /**
     * Returns Fine.
     */
    public function getFine(): ?GetFineResponse
    {
        return $this->fine;
    }

    /**
     * Sets Fine.
     *
     * @maps fine
     */
    public function setFine(?GetFineResponse $fine): void
    {
        $this->fine = $fine;
    }

    /**
     * Returns Max Days to Pay Past Due.
     */
    public function getMaxDaysToPayPastDue(): ?int
    {
        return $this->maxDaysToPayPastDue;
    }

    /**
     * Sets Max Days to Pay Past Due.
     *
     * @maps max_days_to_pay_past_due
     */
    public function setMaxDaysToPayPastDue(?int $maxDaysToPayPastDue): void
    {
        $this->maxDaysToPayPastDue = $maxDaysToPayPastDue;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['gateway_id']                   = $this->gatewayId;
        $json['amount']                       = $this->amount;
        $json['status']                       = $this->status;
        $json['success']                      = $this->success;
        $json['created_at']                   = DateTimeHelper::toRfc3339DateTime($this->createdAt);
        $json['updated_at']                   = DateTimeHelper::toRfc3339DateTime($this->updatedAt);
        $json['attempt_count']                = $this->attemptCount;
        $json['max_attempts']                 = $this->maxAttempts;
        $json['splits']                       = $this->splits;
        if (isset($this->nextAttempt)) {
            $json['next_attempt']             = DateTimeHelper::toRfc3339DateTime($this->nextAttempt);
        }
        $json['transaction_type']             = $this->transactionType ?? 'transaction';
        $json['id']                           = $this->id;
        $json['gateway_response']             = $this->gatewayResponse;
        $json['antifraud_response']           = $this->antifraudResponse;
        if (isset($this->metadata)) {
            $json['metadata']                 = $this->metadata;
        }
        $json['split']                        = $this->split;
        if (isset($this->interest)) {
            $json['interest']                 = $this->interest;
        }
        if (isset($this->fine)) {
            $json['fine']                     = $this->fine;
        }
        if (isset($this->maxDaysToPayPastDue)) {
            $json['max_days_to_pay_past_due'] = $this->maxDaysToPayPastDue;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
