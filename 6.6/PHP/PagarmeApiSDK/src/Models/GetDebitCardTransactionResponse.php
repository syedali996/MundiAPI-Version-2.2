<?php

declare(strict_types=1);

/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PagarmeApiSDKLib\Models;

use stdClass;

/**
 * Response object for getting a debit card transaction
 *
 * @discriminator transaction_type
 * @discriminatorType debit_card
 */
class GetDebitCardTransactionResponse extends GetTransactionResponse implements \JsonSerializable
{
    /**
     * @var string
     */
    private $statementDescriptor;

    /**
     * @var string
     */
    private $acquirerName;

    /**
     * @var string
     */
    private $acquirerAffiliationCode;

    /**
     * @var string
     */
    private $acquirerTid;

    /**
     * @var string
     */
    private $acquirerNsu;

    /**
     * @var string
     */
    private $acquirerAuthCode;

    /**
     * @var string
     */
    private $operationType;

    /**
     * @var GetCardResponse
     */
    private $card;

    /**
     * @var string
     */
    private $acquirerMessage;

    /**
     * @var string
     */
    private $acquirerReturnCode;

    /**
     * @var string
     */
    private $mpi;

    /**
     * @var string
     */
    private $eci;

    /**
     * @var string
     */
    private $authenticationType;

    /**
     * @var string
     */
    private $threedAuthenticationUrl;

    /**
     * @param string $gatewayId
     * @param int $amount
     * @param string $status
     * @param bool $success
     * @param \DateTime $createdAt
     * @param \DateTime $updatedAt
     * @param int $attemptCount
     * @param int $maxAttempts
     * @param GetSplitResponse[] $splits
     * @param string $id
     * @param GetGatewayResponseResponse $gatewayResponse
     * @param GetAntifraudResponse $antifraudResponse
     * @param GetSplitResponse[] $split
     * @param string $statementDescriptor
     * @param string $acquirerName
     * @param string $acquirerAffiliationCode
     * @param string $acquirerTid
     * @param string $acquirerNsu
     * @param string $acquirerAuthCode
     * @param string $operationType
     * @param GetCardResponse $card
     * @param string $acquirerMessage
     * @param string $acquirerReturnCode
     * @param string $mpi
     * @param string $eci
     * @param string $authenticationType
     * @param string $threedAuthenticationUrl
     */
    public function __construct(
        string $gatewayId,
        int $amount,
        string $status,
        bool $success,
        \DateTime $createdAt,
        \DateTime $updatedAt,
        int $attemptCount,
        int $maxAttempts,
        array $splits,
        string $id,
        GetGatewayResponseResponse $gatewayResponse,
        GetAntifraudResponse $antifraudResponse,
        array $split,
        string $statementDescriptor,
        string $acquirerName,
        string $acquirerAffiliationCode,
        string $acquirerTid,
        string $acquirerNsu,
        string $acquirerAuthCode,
        string $operationType,
        GetCardResponse $card,
        string $acquirerMessage,
        string $acquirerReturnCode,
        string $mpi,
        string $eci,
        string $authenticationType,
        string $threedAuthenticationUrl
    ) {
        parent::__construct(
            $gatewayId,
            $amount,
            $status,
            $success,
            $createdAt,
            $updatedAt,
            $attemptCount,
            $maxAttempts,
            $splits,
            $id,
            $gatewayResponse,
            $antifraudResponse,
            $split
        );
        $this->statementDescriptor = $statementDescriptor;
        $this->acquirerName = $acquirerName;
        $this->acquirerAffiliationCode = $acquirerAffiliationCode;
        $this->acquirerTid = $acquirerTid;
        $this->acquirerNsu = $acquirerNsu;
        $this->acquirerAuthCode = $acquirerAuthCode;
        $this->operationType = $operationType;
        $this->card = $card;
        $this->acquirerMessage = $acquirerMessage;
        $this->acquirerReturnCode = $acquirerReturnCode;
        $this->mpi = $mpi;
        $this->eci = $eci;
        $this->authenticationType = $authenticationType;
        $this->threedAuthenticationUrl = $threedAuthenticationUrl;
    }

    /**
     * Returns Statement Descriptor.
     * Text that will appear on the debit card's statement
     */
    public function getStatementDescriptor(): string
    {
        return $this->statementDescriptor;
    }

    /**
     * Sets Statement Descriptor.
     * Text that will appear on the debit card's statement
     *
     * @required
     * @maps statement_descriptor
     */
    public function setStatementDescriptor(string $statementDescriptor): void
    {
        $this->statementDescriptor = $statementDescriptor;
    }

    /**
     * Returns Acquirer Name.
     * Acquirer name
     */
    public function getAcquirerName(): string
    {
        return $this->acquirerName;
    }

    /**
     * Sets Acquirer Name.
     * Acquirer name
     *
     * @required
     * @maps acquirer_name
     */
    public function setAcquirerName(string $acquirerName): void
    {
        $this->acquirerName = $acquirerName;
    }

    /**
     * Returns Acquirer Affiliation Code.
     * Aquirer affiliation code
     */
    public function getAcquirerAffiliationCode(): string
    {
        return $this->acquirerAffiliationCode;
    }

    /**
     * Sets Acquirer Affiliation Code.
     * Aquirer affiliation code
     *
     * @required
     * @maps acquirer_affiliation_code
     */
    public function setAcquirerAffiliationCode(string $acquirerAffiliationCode): void
    {
        $this->acquirerAffiliationCode = $acquirerAffiliationCode;
    }

    /**
     * Returns Acquirer Tid.
     * Acquirer TID
     */
    public function getAcquirerTid(): string
    {
        return $this->acquirerTid;
    }

    /**
     * Sets Acquirer Tid.
     * Acquirer TID
     *
     * @required
     * @maps acquirer_tid
     */
    public function setAcquirerTid(string $acquirerTid): void
    {
        $this->acquirerTid = $acquirerTid;
    }

    /**
     * Returns Acquirer Nsu.
     * Acquirer NSU
     */
    public function getAcquirerNsu(): string
    {
        return $this->acquirerNsu;
    }

    /**
     * Sets Acquirer Nsu.
     * Acquirer NSU
     *
     * @required
     * @maps acquirer_nsu
     */
    public function setAcquirerNsu(string $acquirerNsu): void
    {
        $this->acquirerNsu = $acquirerNsu;
    }

    /**
     * Returns Acquirer Auth Code.
     * Acquirer authorization code
     */
    public function getAcquirerAuthCode(): string
    {
        return $this->acquirerAuthCode;
    }

    /**
     * Sets Acquirer Auth Code.
     * Acquirer authorization code
     *
     * @required
     * @maps acquirer_auth_code
     */
    public function setAcquirerAuthCode(string $acquirerAuthCode): void
    {
        $this->acquirerAuthCode = $acquirerAuthCode;
    }

    /**
     * Returns Operation Type.
     * Operation type
     */
    public function getOperationType(): string
    {
        return $this->operationType;
    }

    /**
     * Sets Operation Type.
     * Operation type
     *
     * @required
     * @maps operation_type
     */
    public function setOperationType(string $operationType): void
    {
        $this->operationType = $operationType;
    }

    /**
     * Returns Card.
     * Card data
     */
    public function getCard(): GetCardResponse
    {
        return $this->card;
    }

    /**
     * Sets Card.
     * Card data
     *
     * @required
     * @maps card
     */
    public function setCard(GetCardResponse $card): void
    {
        $this->card = $card;
    }

    /**
     * Returns Acquirer Message.
     * Acquirer message
     */
    public function getAcquirerMessage(): string
    {
        return $this->acquirerMessage;
    }

    /**
     * Sets Acquirer Message.
     * Acquirer message
     *
     * @required
     * @maps acquirer_message
     */
    public function setAcquirerMessage(string $acquirerMessage): void
    {
        $this->acquirerMessage = $acquirerMessage;
    }

    /**
     * Returns Acquirer Return Code.
     * Acquirer Return Code
     */
    public function getAcquirerReturnCode(): string
    {
        return $this->acquirerReturnCode;
    }

    /**
     * Sets Acquirer Return Code.
     * Acquirer Return Code
     *
     * @required
     * @maps acquirer_return_code
     */
    public function setAcquirerReturnCode(string $acquirerReturnCode): void
    {
        $this->acquirerReturnCode = $acquirerReturnCode;
    }

    /**
     * Returns Mpi.
     * Merchant Plugin
     */
    public function getMpi(): string
    {
        return $this->mpi;
    }

    /**
     * Sets Mpi.
     * Merchant Plugin
     *
     * @required
     * @maps mpi
     */
    public function setMpi(string $mpi): void
    {
        $this->mpi = $mpi;
    }

    /**
     * Returns Eci.
     * Electronic Commerce Indicator (ECI)
     */
    public function getEci(): string
    {
        return $this->eci;
    }

    /**
     * Sets Eci.
     * Electronic Commerce Indicator (ECI)
     *
     * @required
     * @maps eci
     */
    public function setEci(string $eci): void
    {
        $this->eci = $eci;
    }

    /**
     * Returns Authentication Type.
     * Authentication type
     */
    public function getAuthenticationType(): string
    {
        return $this->authenticationType;
    }

    /**
     * Sets Authentication Type.
     * Authentication type
     *
     * @required
     * @maps authentication_type
     */
    public function setAuthenticationType(string $authenticationType): void
    {
        $this->authenticationType = $authenticationType;
    }

    /**
     * Returns Threed Authentication Url.
     * 3D-S Authentication Url
     */
    public function getThreedAuthenticationUrl(): string
    {
        return $this->threedAuthenticationUrl;
    }

    /**
     * Sets Threed Authentication Url.
     * 3D-S Authentication Url
     *
     * @required
     * @maps threed_authentication_url
     */
    public function setThreedAuthenticationUrl(string $threedAuthenticationUrl): void
    {
        $this->threedAuthenticationUrl = $threedAuthenticationUrl;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['statement_descriptor']      = $this->statementDescriptor;
        $json['acquirer_name']             = $this->acquirerName;
        $json['acquirer_affiliation_code'] = $this->acquirerAffiliationCode;
        $json['acquirer_tid']              = $this->acquirerTid;
        $json['acquirer_nsu']              = $this->acquirerNsu;
        $json['acquirer_auth_code']        = $this->acquirerAuthCode;
        $json['operation_type']            = $this->operationType;
        $json['card']                      = $this->card;
        $json['acquirer_message']          = $this->acquirerMessage;
        $json['acquirer_return_code']      = $this->acquirerReturnCode;
        $json['mpi']                       = $this->mpi;
        $json['eci']                       = $this->eci;
        $json['authentication_type']       = $this->authenticationType;
        $json['threed_authentication_url'] = $this->threedAuthenticationUrl;
        $json = array_merge($json, parent::jsonSerialize(true));
        $json['transaction_type'] = $this->getTransactionType() ?? 'debit_card';

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
