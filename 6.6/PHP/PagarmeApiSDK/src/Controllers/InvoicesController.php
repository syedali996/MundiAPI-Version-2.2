<?php

declare(strict_types=1);

/*
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PagarmeApiSDKLib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use CoreInterfaces\Core\Request\RequestMethod;
use PagarmeApiSDKLib\Exceptions\ApiException;
use PagarmeApiSDKLib\Models\CreateInvoiceRequest;
use PagarmeApiSDKLib\Models\GetInvoiceResponse;
use PagarmeApiSDKLib\Models\ListInvoicesResponse;
use PagarmeApiSDKLib\Models\UpdateInvoiceStatusRequest;
use PagarmeApiSDKLib\Models\UpdateMetadataRequest;
use PagarmeApiSDKLib\Utils\DateTimeHelper;

class InvoicesController extends BaseController
{
    /**
     * Updates the metadata from an invoice
     *
     * @param string $invoiceId The invoice id
     * @param UpdateMetadataRequest $request Request for updating the invoice metadata
     * @param string|null $idempotencyKey
     *
     * @return GetInvoiceResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateInvoiceMetadata(
        string $invoiceId,
        UpdateMetadataRequest $request,
        ?string $idempotencyKey = null
    ): GetInvoiceResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/invoices/{invoice_id}/metadata')
            ->auth('global')
            ->parameters(
                TemplateParam::init('invoice_id', $invoiceId),
                BodyParam::init($request),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetInvoiceResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string $subscriptionId Subscription Id
     *
     * @return GetInvoiceResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getPartialInvoice(string $subscriptionId): GetInvoiceResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/subscriptions/{subscription_id}/partial-invoice'
        )->auth('global')->parameters(TemplateParam::init('subscription_id', $subscriptionId));

        $_resHandler = $this->responseHandler()->type(GetInvoiceResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Cancels an invoice
     *
     * @param string $invoiceId Invoice id
     * @param string|null $idempotencyKey
     *
     * @return GetInvoiceResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cancelInvoice(string $invoiceId, ?string $idempotencyKey = null): GetInvoiceResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/invoices/{invoice_id}')
            ->auth('global')
            ->parameters(
                TemplateParam::init('invoice_id', $invoiceId),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetInvoiceResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create an Invoice
     *
     * @param string $subscriptionId Subscription Id
     * @param string $cycleId Cycle Id
     * @param CreateInvoiceRequest|null $request
     * @param string|null $idempotencyKey
     *
     * @return GetInvoiceResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createInvoice(
        string $subscriptionId,
        string $cycleId,
        ?CreateInvoiceRequest $request = null,
        ?string $idempotencyKey = null
    ): GetInvoiceResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/subscriptions/{subscription_id}/cycles/{cycle_id}/pay'
        )
            ->auth('global')
            ->parameters(
                TemplateParam::init('subscription_id', $subscriptionId),
                TemplateParam::init('cycle_id', $cycleId),
                BodyParam::init($request),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetInvoiceResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Gets all invoices
     *
     * @param int|null $page Page number
     * @param int|null $size Page size
     * @param string|null $code Filter for Invoice's code
     * @param string|null $customerId Filter for Invoice's customer id
     * @param string|null $subscriptionId Filter for Invoice's subscription id
     * @param \DateTime|null $createdSince Filter for Invoice's creation date start range
     * @param \DateTime|null $createdUntil Filter for Invoices creation date end range
     * @param string|null $status Filter for Invoice's status
     * @param \DateTime|null $dueSince Filter for Invoice's due date start range
     * @param \DateTime|null $dueUntil Filter for Invoice's due date end range
     * @param string|null $customerDocument
     *
     * @return ListInvoicesResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getInvoices(
        ?int $page = null,
        ?int $size = null,
        ?string $code = null,
        ?string $customerId = null,
        ?string $subscriptionId = null,
        ?\DateTime $createdSince = null,
        ?\DateTime $createdUntil = null,
        ?string $status = null,
        ?\DateTime $dueSince = null,
        ?\DateTime $dueUntil = null,
        ?string $customerDocument = null
    ): ListInvoicesResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/invoices')
            ->auth('global')
            ->parameters(
                QueryParam::init('page', $page),
                QueryParam::init('size', $size),
                QueryParam::init('code', $code),
                QueryParam::init('customer_id', $customerId),
                QueryParam::init('subscription_id', $subscriptionId),
                QueryParam::init('created_since', $createdSince)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('created_until', $createdUntil)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('status', $status),
                QueryParam::init('due_since', $dueSince)->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('due_until', $dueUntil)->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('customer_document', $customerDocument)
            );

        $_resHandler = $this->responseHandler()->type(ListInvoicesResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Gets an invoice
     *
     * @param string $invoiceId Invoice Id
     *
     * @return GetInvoiceResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getInvoice(string $invoiceId): GetInvoiceResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/invoices/{invoice_id}')
            ->auth('global')
            ->parameters(TemplateParam::init('invoice_id', $invoiceId));

        $_resHandler = $this->responseHandler()->type(GetInvoiceResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Updates the status from an invoice
     *
     * @param string $invoiceId Invoice Id
     * @param UpdateInvoiceStatusRequest $request Request for updating an invoice's status
     * @param string|null $idempotencyKey
     *
     * @return GetInvoiceResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateInvoiceStatus(
        string $invoiceId,
        UpdateInvoiceStatusRequest $request,
        ?string $idempotencyKey = null
    ): GetInvoiceResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/invoices/{invoice_id}/status')
            ->auth('global')
            ->parameters(
                TemplateParam::init('invoice_id', $invoiceId),
                BodyParam::init($request),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetInvoiceResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
