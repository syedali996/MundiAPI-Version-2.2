# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.models.get_charge_response import *
from pagarmeapisdk.models.get_checkout_payment_response import GetCheckoutPaymentResponse
from pagarmeapisdk.models.get_customer_response import GetCustomerResponse
from pagarmeapisdk.models.get_device_response import GetDeviceResponse
from pagarmeapisdk.models.get_location_response import GetLocationResponse
from pagarmeapisdk.models.get_order_item_response import GetOrderItemResponse
from pagarmeapisdk.models.get_shipping_response import GetShippingResponse


class GetOrderResponse(object):

    """Implementation of the 'GetOrderResponse' model.

    Response object for getting an Order

    Attributes:
        id (string): TODO: type description here.
        code (string): TODO: type description here.
        currency (string): TODO: type description here.
        items (list of GetOrderItemResponse): TODO: type description here.
        customer (GetCustomerResponse): TODO: type description here.
        status (string): TODO: type description here.
        created_at (datetime): TODO: type description here.
        updated_at (datetime): TODO: type description here.
        charges (list of GetChargeResponse): TODO: type description here.
        invoice_url (string): TODO: type description here.
        shipping (GetShippingResponse): TODO: type description here.
        metadata (dict): TODO: type description here.
        checkouts (list of GetCheckoutPaymentResponse): Checkout Payment
            Settings Response
        ip (string): Ip address
        session_id (string): Session id
        location (GetLocationResponse): Location
        device (GetDeviceResponse): Device's informations
        closed (bool): Indicates whether the order is closed

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "code": 'code',
        "currency": 'currency',
        "items": 'items',
        "status": 'status',
        "created_at": 'created_at',
        "updated_at": 'updated_at',
        "charges": 'charges',
        "invoice_url": 'invoice_url',
        "shipping": 'shipping',
        "metadata": 'metadata',
        "closed": 'closed',
        "customer": 'customer',
        "checkouts": 'checkouts',
        "ip": 'ip',
        "session_id": 'session_id',
        "location": 'location',
        "device": 'device'
    }

    _optionals = [
        'customer',
        'checkouts',
        'ip',
        'session_id',
        'location',
        'device',
    ]

    def __init__(self,
                 id=None,
                 code=None,
                 currency=None,
                 items=None,
                 status=None,
                 created_at=None,
                 updated_at=None,
                 charges=None,
                 invoice_url=None,
                 shipping=None,
                 metadata=None,
                 closed=None,
                 customer=APIHelper.SKIP,
                 checkouts=APIHelper.SKIP,
                 ip=APIHelper.SKIP,
                 session_id=APIHelper.SKIP,
                 location=APIHelper.SKIP,
                 device=APIHelper.SKIP):
        """Constructor for the GetOrderResponse class"""

        # Initialize members of the class
        self.id = id 
        self.code = code 
        self.currency = currency 
        self.items = items 
        if customer is not APIHelper.SKIP:
            self.customer = customer 
        self.status = status 
        self.created_at = APIHelper.RFC3339DateTime(created_at) if created_at else None 
        self.updated_at = APIHelper.RFC3339DateTime(updated_at) if updated_at else None 
        self.charges = charges 
        self.invoice_url = invoice_url 
        self.shipping = shipping 
        self.metadata = metadata 
        if checkouts is not APIHelper.SKIP:
            self.checkouts = checkouts 
        if ip is not APIHelper.SKIP:
            self.ip = ip 
        if session_id is not APIHelper.SKIP:
            self.session_id = session_id 
        if location is not APIHelper.SKIP:
            self.location = location 
        if device is not APIHelper.SKIP:
            self.device = device 
        self.closed = closed 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get("id") if dictionary.get("id") else None
        code = dictionary.get("code") if dictionary.get("code") else None
        currency = dictionary.get("currency") if dictionary.get("currency") else None
        items = None
        if dictionary.get('items') is not None:
            items = [GetOrderItemResponse.from_dictionary(x) for x in dictionary.get('items')]
        status = dictionary.get("status") if dictionary.get("status") else None
        created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("created_at")).datetime if dictionary.get("created_at") else None
        updated_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("updated_at")).datetime if dictionary.get("updated_at") else None
        charges = None
        if dictionary.get('charges') is not None:
            charges = [GetChargeResponse.from_dictionary(x) for x in dictionary.get('charges')]
        invoice_url = dictionary.get("invoice_url") if dictionary.get("invoice_url") else None
        shipping = GetShippingResponse.from_dictionary(dictionary.get('shipping')) if dictionary.get('shipping') else None
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else None
        closed = dictionary.get("closed") if "closed" in dictionary.keys() else None
        customer = GetCustomerResponse.from_dictionary(dictionary.get('customer')) if 'customer' in dictionary.keys() else APIHelper.SKIP 
        checkouts = None
        if dictionary.get('checkouts') is not None:
            checkouts = [GetCheckoutPaymentResponse.from_dictionary(x) for x in dictionary.get('checkouts')]
        else:
            checkouts = APIHelper.SKIP
        ip = dictionary.get("ip") if dictionary.get("ip") else APIHelper.SKIP
        session_id = dictionary.get("session_id") if dictionary.get("session_id") else APIHelper.SKIP
        location = GetLocationResponse.from_dictionary(dictionary.get('location')) if 'location' in dictionary.keys() else APIHelper.SKIP 
        device = GetDeviceResponse.from_dictionary(dictionary.get('device')) if 'device' in dictionary.keys() else APIHelper.SKIP 
        # Return an object of this model
        return cls(id,
                   code,
                   currency,
                   items,
                   status,
                   created_at,
                   updated_at,
                   charges,
                   invoice_url,
                   shipping,
                   metadata,
                   closed,
                   customer,
                   checkouts,
                   ip,
                   session_id,
                   location,
                   device)
