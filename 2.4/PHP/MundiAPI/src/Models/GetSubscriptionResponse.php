<?php

declare(strict_types=1);

/*
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MundiAPILib\Models;

use MundiAPILib\Utils\DateTimeHelper;
use stdClass;

class GetSubscriptionResponse implements \JsonSerializable
{
    /**
     * @var string
     */
    private $id;

    /**
     * @var string
     */
    private $code;

    /**
     * @var \DateTime
     */
    private $startAt;

    /**
     * @var string
     */
    private $interval;

    /**
     * @var int
     */
    private $intervalCount;

    /**
     * @var string
     */
    private $billingType;

    /**
     * @var GetPeriodResponse|null
     */
    private $currentCycle;

    /**
     * @var string
     */
    private $paymentMethod;

    /**
     * @var string
     */
    private $currency;

    /**
     * @var int
     */
    private $installments;

    /**
     * @var string
     */
    private $status;

    /**
     * @var \DateTime
     */
    private $createdAt;

    /**
     * @var \DateTime
     */
    private $updatedAt;

    /**
     * @var GetCustomerResponse|null
     */
    private $customer;

    /**
     * @var GetCardResponse
     */
    private $card;

    /**
     * @var GetSubscriptionItemResponse[]
     */
    private $items;

    /**
     * @var string
     */
    private $statementDescriptor;

    /**
     * @var array<string,string>
     */
    private $metadata;

    /**
     * @var GetSetupResponse
     */
    private $setup;

    /**
     * @var string
     */
    private $gatewayAffiliationId;

    /**
     * @var \DateTime|null
     */
    private $nextBillingAt;

    /**
     * @var int|null
     */
    private $billingDay;

    /**
     * @var int|null
     */
    private $minimumPrice;

    /**
     * @var \DateTime|null
     */
    private $canceledAt;

    /**
     * @var GetDiscountResponse[]|null
     */
    private $discounts;

    /**
     * @var GetIncrementResponse[]
     */
    private $increments;

    /**
     * @var int|null
     */
    private $boletoDueDays;

    /**
     * @var GetSubscriptionSplitResponse
     */
    private $split;

    /**
     * @param string $id
     * @param string $code
     * @param \DateTime $startAt
     * @param string $interval
     * @param int $intervalCount
     * @param string $billingType
     * @param string $paymentMethod
     * @param string $currency
     * @param int $installments
     * @param string $status
     * @param \DateTime $createdAt
     * @param \DateTime $updatedAt
     * @param GetCardResponse $card
     * @param GetSubscriptionItemResponse[] $items
     * @param string $statementDescriptor
     * @param array<string,string> $metadata
     * @param GetSetupResponse $setup
     * @param string $gatewayAffiliationId
     * @param GetIncrementResponse[] $increments
     * @param GetSubscriptionSplitResponse $split
     */
    public function __construct(
        string $id,
        string $code,
        \DateTime $startAt,
        string $interval,
        int $intervalCount,
        string $billingType,
        string $paymentMethod,
        string $currency,
        int $installments,
        string $status,
        \DateTime $createdAt,
        \DateTime $updatedAt,
        GetCardResponse $card,
        array $items,
        string $statementDescriptor,
        array $metadata,
        GetSetupResponse $setup,
        string $gatewayAffiliationId,
        array $increments,
        GetSubscriptionSplitResponse $split
    ) {
        $this->id = $id;
        $this->code = $code;
        $this->startAt = $startAt;
        $this->interval = $interval;
        $this->intervalCount = $intervalCount;
        $this->billingType = $billingType;
        $this->paymentMethod = $paymentMethod;
        $this->currency = $currency;
        $this->installments = $installments;
        $this->status = $status;
        $this->createdAt = $createdAt;
        $this->updatedAt = $updatedAt;
        $this->card = $card;
        $this->items = $items;
        $this->statementDescriptor = $statementDescriptor;
        $this->metadata = $metadata;
        $this->setup = $setup;
        $this->gatewayAffiliationId = $gatewayAffiliationId;
        $this->increments = $increments;
        $this->split = $split;
    }

    /**
     * Returns Id.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Code.
     */
    public function getCode(): string
    {
        return $this->code;
    }

    /**
     * Sets Code.
     *
     * @required
     * @maps code
     */
    public function setCode(string $code): void
    {
        $this->code = $code;
    }

    /**
     * Returns Start At.
     */
    public function getStartAt(): \DateTime
    {
        return $this->startAt;
    }

    /**
     * Sets Start At.
     *
     * @required
     * @maps start_at
     * @factory \MundiAPILib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setStartAt(\DateTime $startAt): void
    {
        $this->startAt = $startAt;
    }

    /**
     * Returns Interval.
     */
    public function getInterval(): string
    {
        return $this->interval;
    }

    /**
     * Sets Interval.
     *
     * @required
     * @maps interval
     */
    public function setInterval(string $interval): void
    {
        $this->interval = $interval;
    }

    /**
     * Returns Interval Count.
     */
    public function getIntervalCount(): int
    {
        return $this->intervalCount;
    }

    /**
     * Sets Interval Count.
     *
     * @required
     * @maps interval_count
     */
    public function setIntervalCount(int $intervalCount): void
    {
        $this->intervalCount = $intervalCount;
    }

    /**
     * Returns Billing Type.
     */
    public function getBillingType(): string
    {
        return $this->billingType;
    }

    /**
     * Sets Billing Type.
     *
     * @required
     * @maps billing_type
     */
    public function setBillingType(string $billingType): void
    {
        $this->billingType = $billingType;
    }

    /**
     * Returns Current Cycle.
     */
    public function getCurrentCycle(): ?GetPeriodResponse
    {
        return $this->currentCycle;
    }

    /**
     * Sets Current Cycle.
     *
     * @maps current_cycle
     */
    public function setCurrentCycle(?GetPeriodResponse $currentCycle): void
    {
        $this->currentCycle = $currentCycle;
    }

    /**
     * Returns Payment Method.
     */
    public function getPaymentMethod(): string
    {
        return $this->paymentMethod;
    }

    /**
     * Sets Payment Method.
     *
     * @required
     * @maps payment_method
     */
    public function setPaymentMethod(string $paymentMethod): void
    {
        $this->paymentMethod = $paymentMethod;
    }

    /**
     * Returns Currency.
     */
    public function getCurrency(): string
    {
        return $this->currency;
    }

    /**
     * Sets Currency.
     *
     * @required
     * @maps currency
     */
    public function setCurrency(string $currency): void
    {
        $this->currency = $currency;
    }

    /**
     * Returns Installments.
     */
    public function getInstallments(): int
    {
        return $this->installments;
    }

    /**
     * Sets Installments.
     *
     * @required
     * @maps installments
     */
    public function setInstallments(int $installments): void
    {
        $this->installments = $installments;
    }

    /**
     * Returns Status.
     */
    public function getStatus(): string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     *
     * @required
     * @maps status
     */
    public function setStatus(string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Created At.
     */
    public function getCreatedAt(): \DateTime
    {
        return $this->createdAt;
    }

    /**
     * Sets Created At.
     *
     * @required
     * @maps created_at
     * @factory \MundiAPILib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setCreatedAt(\DateTime $createdAt): void
    {
        $this->createdAt = $createdAt;
    }

    /**
     * Returns Updated At.
     */
    public function getUpdatedAt(): \DateTime
    {
        return $this->updatedAt;
    }

    /**
     * Sets Updated At.
     *
     * @required
     * @maps updated_at
     * @factory \MundiAPILib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setUpdatedAt(\DateTime $updatedAt): void
    {
        $this->updatedAt = $updatedAt;
    }

    /**
     * Returns Customer.
     */
    public function getCustomer(): ?GetCustomerResponse
    {
        return $this->customer;
    }

    /**
     * Sets Customer.
     *
     * @maps customer
     */
    public function setCustomer(?GetCustomerResponse $customer): void
    {
        $this->customer = $customer;
    }

    /**
     * Returns Card.
     */
    public function getCard(): GetCardResponse
    {
        return $this->card;
    }

    /**
     * Sets Card.
     *
     * @required
     * @maps card
     */
    public function setCard(GetCardResponse $card): void
    {
        $this->card = $card;
    }

    /**
     * Returns Items.
     *
     * @return GetSubscriptionItemResponse[]
     */
    public function getItems(): array
    {
        return $this->items;
    }

    /**
     * Sets Items.
     *
     * @required
     * @maps items
     *
     * @param GetSubscriptionItemResponse[] $items
     */
    public function setItems(array $items): void
    {
        $this->items = $items;
    }

    /**
     * Returns Statement Descriptor.
     */
    public function getStatementDescriptor(): string
    {
        return $this->statementDescriptor;
    }

    /**
     * Sets Statement Descriptor.
     *
     * @required
     * @maps statement_descriptor
     */
    public function setStatementDescriptor(string $statementDescriptor): void
    {
        $this->statementDescriptor = $statementDescriptor;
    }

    /**
     * Returns Metadata.
     *
     * @return array<string,string>
     */
    public function getMetadata(): array
    {
        return $this->metadata;
    }

    /**
     * Sets Metadata.
     *
     * @required
     * @maps metadata
     *
     * @param array<string,string> $metadata
     */
    public function setMetadata(array $metadata): void
    {
        $this->metadata = $metadata;
    }

    /**
     * Returns Setup.
     */
    public function getSetup(): GetSetupResponse
    {
        return $this->setup;
    }

    /**
     * Sets Setup.
     *
     * @required
     * @maps setup
     */
    public function setSetup(GetSetupResponse $setup): void
    {
        $this->setup = $setup;
    }

    /**
     * Returns Gateway Affiliation Id.
     * Affiliation Code
     */
    public function getGatewayAffiliationId(): string
    {
        return $this->gatewayAffiliationId;
    }

    /**
     * Sets Gateway Affiliation Id.
     * Affiliation Code
     *
     * @required
     * @maps gateway_affiliation_id
     */
    public function setGatewayAffiliationId(string $gatewayAffiliationId): void
    {
        $this->gatewayAffiliationId = $gatewayAffiliationId;
    }

    /**
     * Returns Next Billing At.
     */
    public function getNextBillingAt(): ?\DateTime
    {
        return $this->nextBillingAt;
    }

    /**
     * Sets Next Billing At.
     *
     * @maps next_billing_at
     * @factory \MundiAPILib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setNextBillingAt(?\DateTime $nextBillingAt): void
    {
        $this->nextBillingAt = $nextBillingAt;
    }

    /**
     * Returns Billing Day.
     */
    public function getBillingDay(): ?int
    {
        return $this->billingDay;
    }

    /**
     * Sets Billing Day.
     *
     * @maps billing_day
     */
    public function setBillingDay(?int $billingDay): void
    {
        $this->billingDay = $billingDay;
    }

    /**
     * Returns Minimum Price.
     */
    public function getMinimumPrice(): ?int
    {
        return $this->minimumPrice;
    }

    /**
     * Sets Minimum Price.
     *
     * @maps minimum_price
     */
    public function setMinimumPrice(?int $minimumPrice): void
    {
        $this->minimumPrice = $minimumPrice;
    }

    /**
     * Returns Canceled At.
     */
    public function getCanceledAt(): ?\DateTime
    {
        return $this->canceledAt;
    }

    /**
     * Sets Canceled At.
     *
     * @maps canceled_at
     * @factory \MundiAPILib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setCanceledAt(?\DateTime $canceledAt): void
    {
        $this->canceledAt = $canceledAt;
    }

    /**
     * Returns Discounts.
     * Subscription discounts
     *
     * @return GetDiscountResponse[]|null
     */
    public function getDiscounts(): ?array
    {
        return $this->discounts;
    }

    /**
     * Sets Discounts.
     * Subscription discounts
     *
     * @maps discounts
     *
     * @param GetDiscountResponse[]|null $discounts
     */
    public function setDiscounts(?array $discounts): void
    {
        $this->discounts = $discounts;
    }

    /**
     * Returns Increments.
     * Subscription increments
     *
     * @return GetIncrementResponse[]
     */
    public function getIncrements(): array
    {
        return $this->increments;
    }

    /**
     * Sets Increments.
     * Subscription increments
     *
     * @required
     * @maps increments
     *
     * @param GetIncrementResponse[] $increments
     */
    public function setIncrements(array $increments): void
    {
        $this->increments = $increments;
    }

    /**
     * Returns Boleto Due Days.
     * Days until boleto expires
     */
    public function getBoletoDueDays(): ?int
    {
        return $this->boletoDueDays;
    }

    /**
     * Sets Boleto Due Days.
     * Days until boleto expires
     *
     * @maps boleto_due_days
     */
    public function setBoletoDueDays(?int $boletoDueDays): void
    {
        $this->boletoDueDays = $boletoDueDays;
    }

    /**
     * Returns Split.
     * Subscription's split response
     */
    public function getSplit(): GetSubscriptionSplitResponse
    {
        return $this->split;
    }

    /**
     * Sets Split.
     * Subscription's split response
     *
     * @required
     * @maps split
     */
    public function setSplit(GetSubscriptionSplitResponse $split): void
    {
        $this->split = $split;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['id']                     = $this->id;
        $json['code']                   = $this->code;
        $json['start_at']               = DateTimeHelper::toRfc3339DateTime($this->startAt);
        $json['interval']               = $this->interval;
        $json['interval_count']         = $this->intervalCount;
        $json['billing_type']           = $this->billingType;
        if (isset($this->currentCycle)) {
            $json['current_cycle']      = $this->currentCycle;
        }
        $json['payment_method']         = $this->paymentMethod;
        $json['currency']               = $this->currency;
        $json['installments']           = $this->installments;
        $json['status']                 = $this->status;
        $json['created_at']             = DateTimeHelper::toRfc3339DateTime($this->createdAt);
        $json['updated_at']             = DateTimeHelper::toRfc3339DateTime($this->updatedAt);
        if (isset($this->customer)) {
            $json['customer']           = $this->customer;
        }
        $json['card']                   = $this->card;
        $json['items']                  = $this->items;
        $json['statement_descriptor']   = $this->statementDescriptor;
        $json['metadata']               = $this->metadata;
        $json['setup']                  = $this->setup;
        $json['gateway_affiliation_id'] = $this->gatewayAffiliationId;
        if (isset($this->nextBillingAt)) {
            $json['next_billing_at']    = DateTimeHelper::toRfc3339DateTime($this->nextBillingAt);
        }
        if (isset($this->billingDay)) {
            $json['billing_day']        = $this->billingDay;
        }
        if (isset($this->minimumPrice)) {
            $json['minimum_price']      = $this->minimumPrice;
        }
        if (isset($this->canceledAt)) {
            $json['canceled_at']        = DateTimeHelper::toRfc3339DateTime($this->canceledAt);
        }
        if (isset($this->discounts)) {
            $json['discounts']          = $this->discounts;
        }
        $json['increments']             = $this->increments;
        if (isset($this->boletoDueDays)) {
            $json['boleto_due_days']    = $this->boletoDueDays;
        }
        $json['split']                  = $this->split;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
