<?php

declare(strict_types=1);

/*
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MundiAPILib\Models;

use stdClass;

/**
 * Card data
 */
class CreateCardRequest implements \JsonSerializable
{
    /**
     * @var string
     */
    private $number;

    /**
     * @var string
     */
    private $holderName;

    /**
     * @var int
     */
    private $expMonth;

    /**
     * @var int
     */
    private $expYear;

    /**
     * @var string
     */
    private $cvv;

    /**
     * @var CreateAddressRequest
     */
    private $billingAddress;

    /**
     * @var string
     */
    private $brand;

    /**
     * @var string
     */
    private $billingAddressId;

    /**
     * @var array<string,string>
     */
    private $metadata;

    /**
     * @var string
     */
    private $type;

    /**
     * @var CreateCardOptionsRequest
     */
    private $options;

    /**
     * @var string|null
     */
    private $holderDocument;

    /**
     * @var bool
     */
    private $privateLabel;

    /**
     * @var string
     */
    private $label;

    /**
     * @var string|null
     */
    private $id;

    /**
     * @var string|null
     */
    private $token;

    /**
     * @param string $number
     * @param string $holderName
     * @param int $expMonth
     * @param int $expYear
     * @param string $cvv
     * @param CreateAddressRequest $billingAddress
     * @param string $brand
     * @param string $billingAddressId
     * @param array<string,string> $metadata
     * @param string $type
     * @param CreateCardOptionsRequest $options
     * @param bool $privateLabel
     * @param string $label
     */
    public function __construct(
        string $number,
        string $holderName,
        int $expMonth,
        int $expYear,
        string $cvv,
        CreateAddressRequest $billingAddress,
        string $brand,
        string $billingAddressId,
        array $metadata,
        string $type,
        CreateCardOptionsRequest $options,
        bool $privateLabel,
        string $label
    ) {
        $this->number = $number;
        $this->holderName = $holderName;
        $this->expMonth = $expMonth;
        $this->expYear = $expYear;
        $this->cvv = $cvv;
        $this->billingAddress = $billingAddress;
        $this->brand = $brand;
        $this->billingAddressId = $billingAddressId;
        $this->metadata = $metadata;
        $this->type = $type;
        $this->options = $options;
        $this->privateLabel = $privateLabel;
        $this->label = $label;
    }

    /**
     * Returns Number.
     * Credit card number
     */
    public function getNumber(): string
    {
        return $this->number;
    }

    /**
     * Sets Number.
     * Credit card number
     *
     * @required
     * @maps number
     */
    public function setNumber(string $number): void
    {
        $this->number = $number;
    }

    /**
     * Returns Holder Name.
     * Holder name, as written on the card
     */
    public function getHolderName(): string
    {
        return $this->holderName;
    }

    /**
     * Sets Holder Name.
     * Holder name, as written on the card
     *
     * @required
     * @maps holder_name
     */
    public function setHolderName(string $holderName): void
    {
        $this->holderName = $holderName;
    }

    /**
     * Returns Exp Month.
     * The expiration month
     */
    public function getExpMonth(): int
    {
        return $this->expMonth;
    }

    /**
     * Sets Exp Month.
     * The expiration month
     *
     * @required
     * @maps exp_month
     */
    public function setExpMonth(int $expMonth): void
    {
        $this->expMonth = $expMonth;
    }

    /**
     * Returns Exp Year.
     * The expiration year, that can be informed with 2 or 4 digits
     */
    public function getExpYear(): int
    {
        return $this->expYear;
    }

    /**
     * Sets Exp Year.
     * The expiration year, that can be informed with 2 or 4 digits
     *
     * @required
     * @maps exp_year
     */
    public function setExpYear(int $expYear): void
    {
        $this->expYear = $expYear;
    }

    /**
     * Returns Cvv.
     * The card's security code
     */
    public function getCvv(): string
    {
        return $this->cvv;
    }

    /**
     * Sets Cvv.
     * The card's security code
     *
     * @required
     * @maps cvv
     */
    public function setCvv(string $cvv): void
    {
        $this->cvv = $cvv;
    }

    /**
     * Returns Billing Address.
     * Card's billing address
     */
    public function getBillingAddress(): CreateAddressRequest
    {
        return $this->billingAddress;
    }

    /**
     * Sets Billing Address.
     * Card's billing address
     *
     * @required
     * @maps billing_address
     */
    public function setBillingAddress(CreateAddressRequest $billingAddress): void
    {
        $this->billingAddress = $billingAddress;
    }

    /**
     * Returns Brand.
     * Card brand
     */
    public function getBrand(): string
    {
        return $this->brand;
    }

    /**
     * Sets Brand.
     * Card brand
     *
     * @required
     * @maps brand
     */
    public function setBrand(string $brand): void
    {
        $this->brand = $brand;
    }

    /**
     * Returns Billing Address Id.
     * The address id for the billing address
     */
    public function getBillingAddressId(): string
    {
        return $this->billingAddressId;
    }

    /**
     * Sets Billing Address Id.
     * The address id for the billing address
     *
     * @required
     * @maps billing_address_id
     */
    public function setBillingAddressId(string $billingAddressId): void
    {
        $this->billingAddressId = $billingAddressId;
    }

    /**
     * Returns Metadata.
     * Metadata
     *
     * @return array<string,string>
     */
    public function getMetadata(): array
    {
        return $this->metadata;
    }

    /**
     * Sets Metadata.
     * Metadata
     *
     * @required
     * @maps metadata
     *
     * @param array<string,string> $metadata
     */
    public function setMetadata(array $metadata): void
    {
        $this->metadata = $metadata;
    }

    /**
     * Returns Type.
     * Card type
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * Card type
     *
     * @required
     * @maps type
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Options.
     * Options for creating the card
     */
    public function getOptions(): CreateCardOptionsRequest
    {
        return $this->options;
    }

    /**
     * Sets Options.
     * Options for creating the card
     *
     * @required
     * @maps options
     */
    public function setOptions(CreateCardOptionsRequest $options): void
    {
        $this->options = $options;
    }

    /**
     * Returns Holder Document.
     * Document number for the card's holder
     */
    public function getHolderDocument(): ?string
    {
        return $this->holderDocument;
    }

    /**
     * Sets Holder Document.
     * Document number for the card's holder
     *
     * @maps holder_document
     */
    public function setHolderDocument(?string $holderDocument): void
    {
        $this->holderDocument = $holderDocument;
    }

    /**
     * Returns Private Label.
     * Indicates whether it is a private label card
     */
    public function getPrivateLabel(): bool
    {
        return $this->privateLabel;
    }

    /**
     * Sets Private Label.
     * Indicates whether it is a private label card
     *
     * @required
     * @maps private_label
     */
    public function setPrivateLabel(bool $privateLabel): void
    {
        $this->privateLabel = $privateLabel;
    }

    /**
     * Returns Label.
     */
    public function getLabel(): string
    {
        return $this->label;
    }

    /**
     * Sets Label.
     *
     * @required
     * @maps label
     */
    public function setLabel(string $label): void
    {
        $this->label = $label;
    }

    /**
     * Returns Id.
     * Identifier
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Identifier
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Token.
     * token identifier
     */
    public function getToken(): ?string
    {
        return $this->token;
    }

    /**
     * Sets Token.
     * token identifier
     *
     * @maps token
     */
    public function setToken(?string $token): void
    {
        $this->token = $token;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['number']              = $this->number;
        $json['holder_name']         = $this->holderName;
        $json['exp_month']           = $this->expMonth;
        $json['exp_year']            = $this->expYear;
        $json['cvv']                 = $this->cvv;
        $json['billing_address']     = $this->billingAddress;
        $json['brand']               = $this->brand;
        $json['billing_address_id']  = $this->billingAddressId;
        $json['metadata']            = $this->metadata;
        $json['type']                = $this->type;
        $json['options']             = $this->options;
        if (isset($this->holderDocument)) {
            $json['holder_document'] = $this->holderDocument;
        }
        $json['private_label']       = $this->privateLabel;
        $json['label']               = $this->label;
        if (isset($this->id)) {
            $json['id']              = $this->id;
        }
        if (isset($this->token)) {
            $json['token']           = $this->token;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
