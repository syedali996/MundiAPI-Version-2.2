<?php

declare(strict_types=1);

/*
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MundiAPILib\Models;

use stdClass;

/**
 * Request for updating the payment method of a charge
 */
class UpdateChargePaymentMethodRequest implements \JsonSerializable
{
    /**
     * @var bool
     */
    private $updateSubscription;

    /**
     * @var string
     */
    private $paymentMethod;

    /**
     * @var CreateCreditCardPaymentRequest
     */
    private $creditCard;

    /**
     * @var CreateDebitCardPaymentRequest
     */
    private $debitCard;

    /**
     * @var CreateBoletoPaymentRequest
     */
    private $boleto;

    /**
     * @var CreateVoucherPaymentRequest
     */
    private $voucher;

    /**
     * @var CreateCashPaymentRequest
     */
    private $cash;

    /**
     * @var CreateBankTransferPaymentRequest
     */
    private $bankTransfer;

    /**
     * @var CreatePrivateLabelPaymentRequest
     */
    private $privateLabel;

    /**
     * @param bool $updateSubscription
     * @param string $paymentMethod
     * @param CreateCreditCardPaymentRequest $creditCard
     * @param CreateDebitCardPaymentRequest $debitCard
     * @param CreateBoletoPaymentRequest $boleto
     * @param CreateVoucherPaymentRequest $voucher
     * @param CreateCashPaymentRequest $cash
     * @param CreateBankTransferPaymentRequest $bankTransfer
     * @param CreatePrivateLabelPaymentRequest $privateLabel
     */
    public function __construct(
        bool $updateSubscription,
        string $paymentMethod,
        CreateCreditCardPaymentRequest $creditCard,
        CreateDebitCardPaymentRequest $debitCard,
        CreateBoletoPaymentRequest $boleto,
        CreateVoucherPaymentRequest $voucher,
        CreateCashPaymentRequest $cash,
        CreateBankTransferPaymentRequest $bankTransfer,
        CreatePrivateLabelPaymentRequest $privateLabel
    ) {
        $this->updateSubscription = $updateSubscription;
        $this->paymentMethod = $paymentMethod;
        $this->creditCard = $creditCard;
        $this->debitCard = $debitCard;
        $this->boleto = $boleto;
        $this->voucher = $voucher;
        $this->cash = $cash;
        $this->bankTransfer = $bankTransfer;
        $this->privateLabel = $privateLabel;
    }

    /**
     * Returns Update Subscription.
     * Indicates if the payment method from the subscription must also be updated
     */
    public function getUpdateSubscription(): bool
    {
        return $this->updateSubscription;
    }

    /**
     * Sets Update Subscription.
     * Indicates if the payment method from the subscription must also be updated
     *
     * @required
     * @maps update_subscription
     */
    public function setUpdateSubscription(bool $updateSubscription): void
    {
        $this->updateSubscription = $updateSubscription;
    }

    /**
     * Returns Payment Method.
     * The new payment method
     */
    public function getPaymentMethod(): string
    {
        return $this->paymentMethod;
    }

    /**
     * Sets Payment Method.
     * The new payment method
     *
     * @required
     * @maps payment_method
     */
    public function setPaymentMethod(string $paymentMethod): void
    {
        $this->paymentMethod = $paymentMethod;
    }

    /**
     * Returns Credit Card.
     * Credit card data
     */
    public function getCreditCard(): CreateCreditCardPaymentRequest
    {
        return $this->creditCard;
    }

    /**
     * Sets Credit Card.
     * Credit card data
     *
     * @required
     * @maps credit_card
     */
    public function setCreditCard(CreateCreditCardPaymentRequest $creditCard): void
    {
        $this->creditCard = $creditCard;
    }

    /**
     * Returns Debit Card.
     * Debit card data
     */
    public function getDebitCard(): CreateDebitCardPaymentRequest
    {
        return $this->debitCard;
    }

    /**
     * Sets Debit Card.
     * Debit card data
     *
     * @required
     * @maps debit_card
     */
    public function setDebitCard(CreateDebitCardPaymentRequest $debitCard): void
    {
        $this->debitCard = $debitCard;
    }

    /**
     * Returns Boleto.
     * Boleto data
     */
    public function getBoleto(): CreateBoletoPaymentRequest
    {
        return $this->boleto;
    }

    /**
     * Sets Boleto.
     * Boleto data
     *
     * @required
     * @maps boleto
     */
    public function setBoleto(CreateBoletoPaymentRequest $boleto): void
    {
        $this->boleto = $boleto;
    }

    /**
     * Returns Voucher.
     * Voucher data
     */
    public function getVoucher(): CreateVoucherPaymentRequest
    {
        return $this->voucher;
    }

    /**
     * Sets Voucher.
     * Voucher data
     *
     * @required
     * @maps voucher
     */
    public function setVoucher(CreateVoucherPaymentRequest $voucher): void
    {
        $this->voucher = $voucher;
    }

    /**
     * Returns Cash.
     * Cash data
     */
    public function getCash(): CreateCashPaymentRequest
    {
        return $this->cash;
    }

    /**
     * Sets Cash.
     * Cash data
     *
     * @required
     * @maps cash
     */
    public function setCash(CreateCashPaymentRequest $cash): void
    {
        $this->cash = $cash;
    }

    /**
     * Returns Bank Transfer.
     * Bank Transfer data
     */
    public function getBankTransfer(): CreateBankTransferPaymentRequest
    {
        return $this->bankTransfer;
    }

    /**
     * Sets Bank Transfer.
     * Bank Transfer data
     *
     * @required
     * @maps bank_transfer
     */
    public function setBankTransfer(CreateBankTransferPaymentRequest $bankTransfer): void
    {
        $this->bankTransfer = $bankTransfer;
    }

    /**
     * Returns Private Label.
     */
    public function getPrivateLabel(): CreatePrivateLabelPaymentRequest
    {
        return $this->privateLabel;
    }

    /**
     * Sets Private Label.
     *
     * @required
     * @maps private_label
     */
    public function setPrivateLabel(CreatePrivateLabelPaymentRequest $privateLabel): void
    {
        $this->privateLabel = $privateLabel;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['update_subscription'] = $this->updateSubscription;
        $json['payment_method']      = $this->paymentMethod;
        $json['credit_card']         = $this->creditCard;
        $json['debit_card']          = $this->debitCard;
        $json['boleto']              = $this->boleto;
        $json['voucher']             = $this->voucher;
        $json['cash']                = $this->cash;
        $json['bank_transfer']       = $this->bankTransfer;
        $json['private_label']       = $this->privateLabel;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
