<?php

declare(strict_types=1);

/*
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MundiAPILib\Models;

use stdClass;

/**
 * Request for updating a Recipient
 */
class UpdateRecipientRequest implements \JsonSerializable
{
    /**
     * @var string
     */
    private $name;

    /**
     * @var string
     */
    private $email;

    /**
     * @var string
     */
    private $description;

    /**
     * @var string
     */
    private $type;

    /**
     * @var string
     */
    private $status;

    /**
     * @var array<string,string>
     */
    private $metadata;

    /**
     * @param string $name
     * @param string $email
     * @param string $description
     * @param string $type
     * @param string $status
     * @param array<string,string> $metadata
     */
    public function __construct(
        string $name,
        string $email,
        string $description,
        string $type,
        string $status,
        array $metadata
    ) {
        $this->name = $name;
        $this->email = $email;
        $this->description = $description;
        $this->type = $type;
        $this->status = $status;
        $this->metadata = $metadata;
    }

    /**
     * Returns Name.
     * Name
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * Name
     *
     * @required
     * @maps name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Email.
     * Email
     */
    public function getEmail(): string
    {
        return $this->email;
    }

    /**
     * Sets Email.
     * Email
     *
     * @required
     * @maps email
     */
    public function setEmail(string $email): void
    {
        $this->email = $email;
    }

    /**
     * Returns Description.
     * Description
     */
    public function getDescription(): string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * Description
     *
     * @required
     * @maps description
     */
    public function setDescription(string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Type.
     * Type
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * Type
     *
     * @required
     * @maps type
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Status.
     * Status
     */
    public function getStatus(): string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     * Status
     *
     * @required
     * @maps status
     */
    public function setStatus(string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Metadata.
     * Metadata
     *
     * @return array<string,string>
     */
    public function getMetadata(): array
    {
        return $this->metadata;
    }

    /**
     * Sets Metadata.
     * Metadata
     *
     * @required
     * @maps metadata
     *
     * @param array<string,string> $metadata
     */
    public function setMetadata(array $metadata): void
    {
        $this->metadata = $metadata;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['name']        = $this->name;
        $json['email']       = $this->email;
        $json['description'] = $this->description;
        $json['type']        = $this->type;
        $json['status']      = $this->status;
        $json['metadata']    = $this->metadata;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
