<?php

declare(strict_types=1);

/*
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MundiAPILib\Models;

use stdClass;

/**
 * Checkout payment request
 */
class CreateCheckoutPaymentRequest implements \JsonSerializable
{
    /**
     * @var string[]
     */
    private $acceptedPaymentMethods;

    /**
     * @var array[]
     */
    private $acceptedMultiPaymentMethods;

    /**
     * @var string
     */
    private $successUrl;

    /**
     * @var string|null
     */
    private $defaultPaymentMethod;

    /**
     * @var string|null
     */
    private $gatewayAffiliationId;

    /**
     * @var CreateCheckoutCreditCardPaymentRequest|null
     */
    private $creditCard;

    /**
     * @var CreateCheckoutDebitCardPaymentRequest|null
     */
    private $debitCard;

    /**
     * @var CreateCheckoutBoletoPaymentRequest|null
     */
    private $boleto;

    /**
     * @var bool|null
     */
    private $customerEditable;

    /**
     * @var int|null
     */
    private $expiresIn;

    /**
     * @var bool
     */
    private $skipCheckoutSuccessPage;

    /**
     * @var bool
     */
    private $billingAddressEditable;

    /**
     * @var CreateAddressRequest
     */
    private $billingAddress;

    /**
     * @var CreateCheckoutBankTransferRequest
     */
    private $bankTransfer;

    /**
     * @var string[]
     */
    private $acceptedBrands;

    /**
     * @param string[] $acceptedPaymentMethods
     * @param array[] $acceptedMultiPaymentMethods
     * @param string $successUrl
     * @param bool $skipCheckoutSuccessPage
     * @param bool $billingAddressEditable
     * @param CreateAddressRequest $billingAddress
     * @param CreateCheckoutBankTransferRequest $bankTransfer
     * @param string[] $acceptedBrands
     */
    public function __construct(
        array $acceptedPaymentMethods,
        array $acceptedMultiPaymentMethods,
        string $successUrl,
        bool $skipCheckoutSuccessPage,
        bool $billingAddressEditable,
        CreateAddressRequest $billingAddress,
        CreateCheckoutBankTransferRequest $bankTransfer,
        array $acceptedBrands
    ) {
        $this->acceptedPaymentMethods = $acceptedPaymentMethods;
        $this->acceptedMultiPaymentMethods = $acceptedMultiPaymentMethods;
        $this->successUrl = $successUrl;
        $this->skipCheckoutSuccessPage = $skipCheckoutSuccessPage;
        $this->billingAddressEditable = $billingAddressEditable;
        $this->billingAddress = $billingAddress;
        $this->bankTransfer = $bankTransfer;
        $this->acceptedBrands = $acceptedBrands;
    }

    /**
     * Returns Accepted Payment Methods.
     * Accepted Payment Methods
     *
     * @return string[]
     */
    public function getAcceptedPaymentMethods(): array
    {
        return $this->acceptedPaymentMethods;
    }

    /**
     * Sets Accepted Payment Methods.
     * Accepted Payment Methods
     *
     * @required
     * @maps accepted_payment_methods
     *
     * @param string[] $acceptedPaymentMethods
     */
    public function setAcceptedPaymentMethods(array $acceptedPaymentMethods): void
    {
        $this->acceptedPaymentMethods = $acceptedPaymentMethods;
    }

    /**
     * Returns Accepted Multi Payment Methods.
     * Accepted Multi Payment Methods
     *
     * @return array[]
     */
    public function getAcceptedMultiPaymentMethods(): array
    {
        return $this->acceptedMultiPaymentMethods;
    }

    /**
     * Sets Accepted Multi Payment Methods.
     * Accepted Multi Payment Methods
     *
     * @required
     * @maps accepted_multi_payment_methods
     *
     * @param array[] $acceptedMultiPaymentMethods
     */
    public function setAcceptedMultiPaymentMethods(array $acceptedMultiPaymentMethods): void
    {
        $this->acceptedMultiPaymentMethods = $acceptedMultiPaymentMethods;
    }

    /**
     * Returns Success Url.
     * Success url
     */
    public function getSuccessUrl(): string
    {
        return $this->successUrl;
    }

    /**
     * Sets Success Url.
     * Success url
     *
     * @required
     * @maps success_url
     */
    public function setSuccessUrl(string $successUrl): void
    {
        $this->successUrl = $successUrl;
    }

    /**
     * Returns Default Payment Method.
     * Default payment method
     */
    public function getDefaultPaymentMethod(): ?string
    {
        return $this->defaultPaymentMethod;
    }

    /**
     * Sets Default Payment Method.
     * Default payment method
     *
     * @maps default_payment_method
     */
    public function setDefaultPaymentMethod(?string $defaultPaymentMethod): void
    {
        $this->defaultPaymentMethod = $defaultPaymentMethod;
    }

    /**
     * Returns Gateway Affiliation Id.
     * Gateway Affiliation Id
     */
    public function getGatewayAffiliationId(): ?string
    {
        return $this->gatewayAffiliationId;
    }

    /**
     * Sets Gateway Affiliation Id.
     * Gateway Affiliation Id
     *
     * @maps gateway_affiliation_id
     */
    public function setGatewayAffiliationId(?string $gatewayAffiliationId): void
    {
        $this->gatewayAffiliationId = $gatewayAffiliationId;
    }

    /**
     * Returns Credit Card.
     * Credit Card payment request
     */
    public function getCreditCard(): ?CreateCheckoutCreditCardPaymentRequest
    {
        return $this->creditCard;
    }

    /**
     * Sets Credit Card.
     * Credit Card payment request
     *
     * @maps credit_card
     */
    public function setCreditCard(?CreateCheckoutCreditCardPaymentRequest $creditCard): void
    {
        $this->creditCard = $creditCard;
    }

    /**
     * Returns Debit Card.
     * Debit Card payment request
     */
    public function getDebitCard(): ?CreateCheckoutDebitCardPaymentRequest
    {
        return $this->debitCard;
    }

    /**
     * Sets Debit Card.
     * Debit Card payment request
     *
     * @maps debit_card
     */
    public function setDebitCard(?CreateCheckoutDebitCardPaymentRequest $debitCard): void
    {
        $this->debitCard = $debitCard;
    }

    /**
     * Returns Boleto.
     * Boleto payment request
     */
    public function getBoleto(): ?CreateCheckoutBoletoPaymentRequest
    {
        return $this->boleto;
    }

    /**
     * Sets Boleto.
     * Boleto payment request
     *
     * @maps boleto
     */
    public function setBoleto(?CreateCheckoutBoletoPaymentRequest $boleto): void
    {
        $this->boleto = $boleto;
    }

    /**
     * Returns Customer Editable.
     * Customer is editable?
     */
    public function getCustomerEditable(): ?bool
    {
        return $this->customerEditable;
    }

    /**
     * Sets Customer Editable.
     * Customer is editable?
     *
     * @maps customer_editable
     */
    public function setCustomerEditable(?bool $customerEditable): void
    {
        $this->customerEditable = $customerEditable;
    }

    /**
     * Returns Expires In.
     * Time in minutes for expiration
     */
    public function getExpiresIn(): ?int
    {
        return $this->expiresIn;
    }

    /**
     * Sets Expires In.
     * Time in minutes for expiration
     *
     * @maps expires_in
     */
    public function setExpiresIn(?int $expiresIn): void
    {
        $this->expiresIn = $expiresIn;
    }

    /**
     * Returns Skip Checkout Success Page.
     * Skip postpay success screen?
     */
    public function getSkipCheckoutSuccessPage(): bool
    {
        return $this->skipCheckoutSuccessPage;
    }

    /**
     * Sets Skip Checkout Success Page.
     * Skip postpay success screen?
     *
     * @required
     * @maps skip_checkout_success_page
     */
    public function setSkipCheckoutSuccessPage(bool $skipCheckoutSuccessPage): void
    {
        $this->skipCheckoutSuccessPage = $skipCheckoutSuccessPage;
    }

    /**
     * Returns Billing Address Editable.
     * Billing Address is editable?
     */
    public function getBillingAddressEditable(): bool
    {
        return $this->billingAddressEditable;
    }

    /**
     * Sets Billing Address Editable.
     * Billing Address is editable?
     *
     * @required
     * @maps billing_address_editable
     */
    public function setBillingAddressEditable(bool $billingAddressEditable): void
    {
        $this->billingAddressEditable = $billingAddressEditable;
    }

    /**
     * Returns Billing Address.
     * Billing Address
     */
    public function getBillingAddress(): CreateAddressRequest
    {
        return $this->billingAddress;
    }

    /**
     * Sets Billing Address.
     * Billing Address
     *
     * @required
     * @maps billing_address
     */
    public function setBillingAddress(CreateAddressRequest $billingAddress): void
    {
        $this->billingAddress = $billingAddress;
    }

    /**
     * Returns Bank Transfer.
     * Bank Transfer payment request
     */
    public function getBankTransfer(): CreateCheckoutBankTransferRequest
    {
        return $this->bankTransfer;
    }

    /**
     * Sets Bank Transfer.
     * Bank Transfer payment request
     *
     * @required
     * @maps bank_transfer
     */
    public function setBankTransfer(CreateCheckoutBankTransferRequest $bankTransfer): void
    {
        $this->bankTransfer = $bankTransfer;
    }

    /**
     * Returns Accepted Brands.
     * Accepted Brands
     *
     * @return string[]
     */
    public function getAcceptedBrands(): array
    {
        return $this->acceptedBrands;
    }

    /**
     * Sets Accepted Brands.
     * Accepted Brands
     *
     * @required
     * @maps accepted_brands
     *
     * @param string[] $acceptedBrands
     */
    public function setAcceptedBrands(array $acceptedBrands): void
    {
        $this->acceptedBrands = $acceptedBrands;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['accepted_payment_methods']       = $this->acceptedPaymentMethods;
        $json['accepted_multi_payment_methods'] = $this->acceptedMultiPaymentMethods;
        $json['success_url']                    = $this->successUrl;
        if (isset($this->defaultPaymentMethod)) {
            $json['default_payment_method']     = $this->defaultPaymentMethod;
        }
        if (isset($this->gatewayAffiliationId)) {
            $json['gateway_affiliation_id']     = $this->gatewayAffiliationId;
        }
        if (isset($this->creditCard)) {
            $json['credit_card']                = $this->creditCard;
        }
        if (isset($this->debitCard)) {
            $json['debit_card']                 = $this->debitCard;
        }
        if (isset($this->boleto)) {
            $json['boleto']                     = $this->boleto;
        }
        if (isset($this->customerEditable)) {
            $json['customer_editable']          = $this->customerEditable;
        }
        if (isset($this->expiresIn)) {
            $json['expires_in']                 = $this->expiresIn;
        }
        $json['skip_checkout_success_page']     = $this->skipCheckoutSuccessPage;
        $json['billing_address_editable']       = $this->billingAddressEditable;
        $json['billing_address']                = $this->billingAddress;
        $json['bank_transfer']                  = $this->bankTransfer;
        $json['accepted_brands']                = $this->acceptedBrands;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
