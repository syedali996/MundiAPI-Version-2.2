<?php

declare(strict_types=1);

/*
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MundiAPILib\Models;

use stdClass;

/**
 * The settings for creating a debit card payment
 */
class CreateDebitCardPaymentRequest implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $statementDescriptor;

    /**
     * @var CreateCardRequest|null
     */
    private $card;

    /**
     * @var string|null
     */
    private $cardId;

    /**
     * @var string|null
     */
    private $cardToken;

    /**
     * @var bool|null
     */
    private $recurrence;

    /**
     * @var CreatePaymentAuthenticationRequest|null
     */
    private $authentication;

    /**
     * @var CreateCardPaymentContactlessRequest|null
     */
    private $token;

    /**
     * @var string|null
     */
    private $recurrencyCycle;

    /**
     * Returns Statement Descriptor.
     * The text that will be shown on the debit card's statement
     */
    public function getStatementDescriptor(): ?string
    {
        return $this->statementDescriptor;
    }

    /**
     * Sets Statement Descriptor.
     * The text that will be shown on the debit card's statement
     *
     * @maps statement_descriptor
     */
    public function setStatementDescriptor(?string $statementDescriptor): void
    {
        $this->statementDescriptor = $statementDescriptor;
    }

    /**
     * Returns Card.
     * Debit card data
     */
    public function getCard(): ?CreateCardRequest
    {
        return $this->card;
    }

    /**
     * Sets Card.
     * Debit card data
     *
     * @maps card
     */
    public function setCard(?CreateCardRequest $card): void
    {
        $this->card = $card;
    }

    /**
     * Returns Card Id.
     * The debit card id
     */
    public function getCardId(): ?string
    {
        return $this->cardId;
    }

    /**
     * Sets Card Id.
     * The debit card id
     *
     * @maps card_id
     */
    public function setCardId(?string $cardId): void
    {
        $this->cardId = $cardId;
    }

    /**
     * Returns Card Token.
     * The debit card token
     */
    public function getCardToken(): ?string
    {
        return $this->cardToken;
    }

    /**
     * Sets Card Token.
     * The debit card token
     *
     * @maps card_token
     */
    public function setCardToken(?string $cardToken): void
    {
        $this->cardToken = $cardToken;
    }

    /**
     * Returns Recurrence.
     * Indicates a recurrence
     */
    public function getRecurrence(): ?bool
    {
        return $this->recurrence;
    }

    /**
     * Sets Recurrence.
     * Indicates a recurrence
     *
     * @maps recurrence
     */
    public function setRecurrence(?bool $recurrence): void
    {
        $this->recurrence = $recurrence;
    }

    /**
     * Returns Authentication.
     * The payment authentication request
     */
    public function getAuthentication(): ?CreatePaymentAuthenticationRequest
    {
        return $this->authentication;
    }

    /**
     * Sets Authentication.
     * The payment authentication request
     *
     * @maps authentication
     */
    public function setAuthentication(?CreatePaymentAuthenticationRequest $authentication): void
    {
        $this->authentication = $authentication;
    }

    /**
     * Returns Token.
     * The Debit card payment token request
     */
    public function getToken(): ?CreateCardPaymentContactlessRequest
    {
        return $this->token;
    }

    /**
     * Sets Token.
     * The Debit card payment token request
     *
     * @maps token
     */
    public function setToken(?CreateCardPaymentContactlessRequest $token): void
    {
        $this->token = $token;
    }

    /**
     * Returns Recurrency Cycle.
     * Defines whether the card has been used one or more times.
     */
    public function getRecurrencyCycle(): ?string
    {
        return $this->recurrencyCycle;
    }

    /**
     * Sets Recurrency Cycle.
     * Defines whether the card has been used one or more times.
     *
     * @maps recurrency_cycle
     */
    public function setRecurrencyCycle(?string $recurrencyCycle): void
    {
        $this->recurrencyCycle = $recurrencyCycle;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->statementDescriptor)) {
            $json['statement_descriptor'] = $this->statementDescriptor;
        }
        if (isset($this->card)) {
            $json['card']                 = $this->card;
        }
        if (isset($this->cardId)) {
            $json['card_id']              = $this->cardId;
        }
        if (isset($this->cardToken)) {
            $json['card_token']           = $this->cardToken;
        }
        if (isset($this->recurrence)) {
            $json['recurrence']           = $this->recurrence;
        }
        if (isset($this->authentication)) {
            $json['authentication']       = $this->authentication;
        }
        if (isset($this->token)) {
            $json['token']                = $this->token;
        }
        if (isset($this->recurrencyCycle)) {
            $json['recurrency_cycle']     = $this->recurrencyCycle;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
