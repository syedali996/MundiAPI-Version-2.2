<?php

declare(strict_types=1);

/*
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MundiAPILib\Models;

use stdClass;

/**
 * Request for updating a plan
 */
class UpdatePlanRequest implements \JsonSerializable
{
    /**
     * @var string
     */
    private $name;

    /**
     * @var string
     */
    private $description;

    /**
     * @var int[]
     */
    private $installments;

    /**
     * @var string
     */
    private $statementDescriptor;

    /**
     * @var string
     */
    private $currency;

    /**
     * @var string
     */
    private $interval;

    /**
     * @var int
     */
    private $intervalCount;

    /**
     * @var string[]
     */
    private $paymentMethods;

    /**
     * @var string
     */
    private $billingType;

    /**
     * @var string
     */
    private $status;

    /**
     * @var bool
     */
    private $shippable;

    /**
     * @var int[]
     */
    private $billingDays;

    /**
     * @var array<string,string>
     */
    private $metadata;

    /**
     * @var int|null
     */
    private $minimumPrice;

    /**
     * @var int|null
     */
    private $trialPeriodDays;

    /**
     * @param string $name
     * @param string $description
     * @param int[] $installments
     * @param string $statementDescriptor
     * @param string $currency
     * @param string $interval
     * @param int $intervalCount
     * @param string[] $paymentMethods
     * @param string $billingType
     * @param string $status
     * @param bool $shippable
     * @param int[] $billingDays
     * @param array<string,string> $metadata
     */
    public function __construct(
        string $name,
        string $description,
        array $installments,
        string $statementDescriptor,
        string $currency,
        string $interval,
        int $intervalCount,
        array $paymentMethods,
        string $billingType,
        string $status,
        bool $shippable,
        array $billingDays,
        array $metadata
    ) {
        $this->name = $name;
        $this->description = $description;
        $this->installments = $installments;
        $this->statementDescriptor = $statementDescriptor;
        $this->currency = $currency;
        $this->interval = $interval;
        $this->intervalCount = $intervalCount;
        $this->paymentMethods = $paymentMethods;
        $this->billingType = $billingType;
        $this->status = $status;
        $this->shippable = $shippable;
        $this->billingDays = $billingDays;
        $this->metadata = $metadata;
    }

    /**
     * Returns Name.
     * Plan's name
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     * Plan's name
     *
     * @required
     * @maps name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Description.
     * Description
     */
    public function getDescription(): string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * Description
     *
     * @required
     * @maps description
     */
    public function setDescription(string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Installments.
     * Number os installments
     *
     * @return int[]
     */
    public function getInstallments(): array
    {
        return $this->installments;
    }

    /**
     * Sets Installments.
     * Number os installments
     *
     * @required
     * @maps installments
     *
     * @param int[] $installments
     */
    public function setInstallments(array $installments): void
    {
        $this->installments = $installments;
    }

    /**
     * Returns Statement Descriptor.
     * Text that will be shown on the credit card's statement
     */
    public function getStatementDescriptor(): string
    {
        return $this->statementDescriptor;
    }

    /**
     * Sets Statement Descriptor.
     * Text that will be shown on the credit card's statement
     *
     * @required
     * @maps statement_descriptor
     */
    public function setStatementDescriptor(string $statementDescriptor): void
    {
        $this->statementDescriptor = $statementDescriptor;
    }

    /**
     * Returns Currency.
     * Currency
     */
    public function getCurrency(): string
    {
        return $this->currency;
    }

    /**
     * Sets Currency.
     * Currency
     *
     * @required
     * @maps currency
     */
    public function setCurrency(string $currency): void
    {
        $this->currency = $currency;
    }

    /**
     * Returns Interval.
     * Interval
     */
    public function getInterval(): string
    {
        return $this->interval;
    }

    /**
     * Sets Interval.
     * Interval
     *
     * @required
     * @maps interval
     */
    public function setInterval(string $interval): void
    {
        $this->interval = $interval;
    }

    /**
     * Returns Interval Count.
     * Interval count
     */
    public function getIntervalCount(): int
    {
        return $this->intervalCount;
    }

    /**
     * Sets Interval Count.
     * Interval count
     *
     * @required
     * @maps interval_count
     */
    public function setIntervalCount(int $intervalCount): void
    {
        $this->intervalCount = $intervalCount;
    }

    /**
     * Returns Payment Methods.
     * Payment methods accepted by the plan
     *
     * @return string[]
     */
    public function getPaymentMethods(): array
    {
        return $this->paymentMethods;
    }

    /**
     * Sets Payment Methods.
     * Payment methods accepted by the plan
     *
     * @required
     * @maps payment_methods
     *
     * @param string[] $paymentMethods
     */
    public function setPaymentMethods(array $paymentMethods): void
    {
        $this->paymentMethods = $paymentMethods;
    }

    /**
     * Returns Billing Type.
     * Billing type
     */
    public function getBillingType(): string
    {
        return $this->billingType;
    }

    /**
     * Sets Billing Type.
     * Billing type
     *
     * @required
     * @maps billing_type
     */
    public function setBillingType(string $billingType): void
    {
        $this->billingType = $billingType;
    }

    /**
     * Returns Status.
     * Plan status
     */
    public function getStatus(): string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     * Plan status
     *
     * @required
     * @maps status
     */
    public function setStatus(string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Shippable.
     * Indicates if the plan is shippable
     */
    public function getShippable(): bool
    {
        return $this->shippable;
    }

    /**
     * Sets Shippable.
     * Indicates if the plan is shippable
     *
     * @required
     * @maps shippable
     */
    public function setShippable(bool $shippable): void
    {
        $this->shippable = $shippable;
    }

    /**
     * Returns Billing Days.
     * Billing days accepted by the plan
     *
     * @return int[]
     */
    public function getBillingDays(): array
    {
        return $this->billingDays;
    }

    /**
     * Sets Billing Days.
     * Billing days accepted by the plan
     *
     * @required
     * @maps billing_days
     *
     * @param int[] $billingDays
     */
    public function setBillingDays(array $billingDays): void
    {
        $this->billingDays = $billingDays;
    }

    /**
     * Returns Metadata.
     * Metadata
     *
     * @return array<string,string>
     */
    public function getMetadata(): array
    {
        return $this->metadata;
    }

    /**
     * Sets Metadata.
     * Metadata
     *
     * @required
     * @maps metadata
     *
     * @param array<string,string> $metadata
     */
    public function setMetadata(array $metadata): void
    {
        $this->metadata = $metadata;
    }

    /**
     * Returns Minimum Price.
     * Minimum price
     */
    public function getMinimumPrice(): ?int
    {
        return $this->minimumPrice;
    }

    /**
     * Sets Minimum Price.
     * Minimum price
     *
     * @maps minimum_price
     */
    public function setMinimumPrice(?int $minimumPrice): void
    {
        $this->minimumPrice = $minimumPrice;
    }

    /**
     * Returns Trial Period Days.
     * Number of trial period in days, where the customer will not be charged
     */
    public function getTrialPeriodDays(): ?int
    {
        return $this->trialPeriodDays;
    }

    /**
     * Sets Trial Period Days.
     * Number of trial period in days, where the customer will not be charged
     *
     * @maps trial_period_days
     */
    public function setTrialPeriodDays(?int $trialPeriodDays): void
    {
        $this->trialPeriodDays = $trialPeriodDays;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['name']                  = $this->name;
        $json['description']           = $this->description;
        $json['installments']          = $this->installments;
        $json['statement_descriptor']  = $this->statementDescriptor;
        $json['currency']              = $this->currency;
        $json['interval']              = $this->interval;
        $json['interval_count']        = $this->intervalCount;
        $json['payment_methods']       = $this->paymentMethods;
        $json['billing_type']          = $this->billingType;
        $json['status']                = $this->status;
        $json['shippable']             = $this->shippable;
        $json['billing_days']          = $this->billingDays;
        $json['metadata']              = $this->metadata;
        if (isset($this->minimumPrice)) {
            $json['minimum_price']     = $this->minimumPrice;
        }
        if (isset($this->trialPeriodDays)) {
            $json['trial_period_days'] = $this->trialPeriodDays;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
