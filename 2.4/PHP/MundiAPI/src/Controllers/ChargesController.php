<?php

declare(strict_types=1);

/*
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MundiAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use CoreInterfaces\Core\Request\RequestMethod;
use MundiAPILib\Exceptions\ApiException;
use MundiAPILib\Models\CreateCancelChargeRequest;
use MundiAPILib\Models\CreateCaptureChargeRequest;
use MundiAPILib\Models\CreateChargeRequest;
use MundiAPILib\Models\CreateConfirmPaymentRequest;
use MundiAPILib\Models\GetChargeResponse;
use MundiAPILib\Models\GetChargesSummaryResponse;
use MundiAPILib\Models\ListChargesResponse;
use MundiAPILib\Models\ListChargeTransactionsResponse;
use MundiAPILib\Models\UpdateChargeCardRequest;
use MundiAPILib\Models\UpdateChargeDueDateRequest;
use MundiAPILib\Models\UpdateChargePaymentMethodRequest;
use MundiAPILib\Models\UpdateMetadataRequest;
use MundiAPILib\Utils\DateTimeHelper;

class ChargesController extends BaseController
{
    /**
     * Get a charge from its id
     *
     * @param string $chargeId Charge id
     *
     * @return GetChargeResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getCharge(string $chargeId): GetChargeResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/charges/{charge_id}')
            ->auth('global')
            ->parameters(TemplateParam::init('charge_id', $chargeId));

        $_resHandler = $this->responseHandler()->type(GetChargeResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string $chargeId
     * @param CreateConfirmPaymentRequest|null $request Request for confirm payment
     * @param string|null $idempotencyKey
     *
     * @return GetChargeResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function confirmPayment(
        string $chargeId,
        ?CreateConfirmPaymentRequest $request = null,
        ?string $idempotencyKey = null
    ): GetChargeResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/charges/{charge_id}/confirm-payment')
            ->auth('global')
            ->parameters(
                TemplateParam::init('charge_id', $chargeId),
                BodyParam::init($request),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetChargeResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Updates the card from a charge
     *
     * @param string $chargeId Charge id
     * @param UpdateChargeCardRequest $request Request for updating a charge's card
     * @param string|null $idempotencyKey
     *
     * @return GetChargeResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateChargeCard(
        string $chargeId,
        UpdateChargeCardRequest $request,
        ?string $idempotencyKey = null
    ): GetChargeResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/charges/{charge_id}/card')
            ->auth('global')
            ->parameters(
                TemplateParam::init('charge_id', $chargeId),
                BodyParam::init($request),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetChargeResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Lists all charges
     *
     * @param int|null $page Page number
     * @param int|null $size Page size
     * @param string|null $code Filter for charge's code
     * @param string|null $status Filter for charge's status
     * @param string|null $paymentMethod Filter for charge's payment method
     * @param string|null $customerId Filter for charge's customer id
     * @param string|null $orderId Filter for charge's order id
     * @param \DateTime|null $createdSince Filter for the beginning of the range for charge's
     *        creation
     * @param \DateTime|null $createdUntil Filter for the end of the range for charge's creation
     *
     * @return ListChargesResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getCharges(
        ?int $page = null,
        ?int $size = null,
        ?string $code = null,
        ?string $status = null,
        ?string $paymentMethod = null,
        ?string $customerId = null,
        ?string $orderId = null,
        ?\DateTime $createdSince = null,
        ?\DateTime $createdUntil = null
    ): ListChargesResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/charges')
            ->auth('global')
            ->parameters(
                QueryParam::init('page', $page),
                QueryParam::init('size', $size),
                QueryParam::init('code', $code),
                QueryParam::init('status', $status),
                QueryParam::init('payment_method', $paymentMethod),
                QueryParam::init('customer_id', $customerId),
                QueryParam::init('order_id', $orderId),
                QueryParam::init('created_since', $createdSince)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('created_until', $createdUntil)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime'])
            );

        $_resHandler = $this->responseHandler()->type(ListChargesResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Cancel a charge
     *
     * @param string $chargeId Charge id
     * @param CreateCancelChargeRequest|null $request Request for cancelling a charge
     * @param string|null $idempotencyKey
     *
     * @return GetChargeResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cancelCharge(
        string $chargeId,
        ?CreateCancelChargeRequest $request = null,
        ?string $idempotencyKey = null
    ): GetChargeResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/charges/{charge_id}')
            ->auth('global')
            ->parameters(
                TemplateParam::init('charge_id', $chargeId),
                BodyParam::init($request),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetChargeResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Retries a charge
     *
     * @param string $chargeId Charge id
     * @param string|null $idempotencyKey
     *
     * @return GetChargeResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function retryCharge(string $chargeId, ?string $idempotencyKey = null): GetChargeResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/charges/{charge_id}/retry')
            ->auth('global')
            ->parameters(
                TemplateParam::init('charge_id', $chargeId),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetChargeResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Updates a charge's payment method
     *
     * @param string $chargeId Charge id
     * @param UpdateChargePaymentMethodRequest $request Request for updating the payment method from
     *        a charge
     * @param string|null $idempotencyKey
     *
     * @return GetChargeResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateChargePaymentMethod(
        string $chargeId,
        UpdateChargePaymentMethodRequest $request,
        ?string $idempotencyKey = null
    ): GetChargeResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/charges/{charge_id}/payment-method')
            ->auth('global')
            ->parameters(
                TemplateParam::init('charge_id', $chargeId),
                BodyParam::init($request),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetChargeResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Updates the metadata from a charge
     *
     * @param string $chargeId The charge id
     * @param UpdateMetadataRequest $request Request for updating the charge metadata
     * @param string|null $idempotencyKey
     *
     * @return GetChargeResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateChargeMetadata(
        string $chargeId,
        UpdateMetadataRequest $request,
        ?string $idempotencyKey = null
    ): GetChargeResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/Charges/{charge_id}/metadata')
            ->auth('global')
            ->parameters(
                TemplateParam::init('charge_id', $chargeId),
                BodyParam::init($request),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetChargeResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Captures a charge
     *
     * @param string $chargeId Charge id
     * @param CreateCaptureChargeRequest|null $request Request for capturing a charge
     * @param string|null $idempotencyKey
     *
     * @return GetChargeResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function captureCharge(
        string $chargeId,
        ?CreateCaptureChargeRequest $request = null,
        ?string $idempotencyKey = null
    ): GetChargeResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/charges/{charge_id}/capture')
            ->auth('global')
            ->parameters(
                TemplateParam::init('charge_id', $chargeId),
                BodyParam::init($request),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetChargeResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Updates the due date from a charge
     *
     * @param string $chargeId Charge Id
     * @param UpdateChargeDueDateRequest $request Request for updating the due date
     * @param string|null $idempotencyKey
     *
     * @return GetChargeResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateChargeDueDate(
        string $chargeId,
        UpdateChargeDueDateRequest $request,
        ?string $idempotencyKey = null
    ): GetChargeResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/Charges/{charge_id}/due-date')
            ->auth('global')
            ->parameters(
                TemplateParam::init('charge_id', $chargeId),
                BodyParam::init($request),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetChargeResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Creates a new charge
     *
     * @param CreateChargeRequest $request Request for creating a charge
     * @param string|null $idempotencyKey
     *
     * @return GetChargeResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createCharge(CreateChargeRequest $request, ?string $idempotencyKey = null): GetChargeResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/Charges')
            ->auth('global')
            ->parameters(BodyParam::init($request), HeaderParam::init('idempotency-key', $idempotencyKey));

        $_resHandler = $this->responseHandler()->type(GetChargeResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string $chargeId Charge Id
     * @param int|null $page Page number
     * @param int|null $size Page size
     *
     * @return ListChargeTransactionsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getChargeTransactions(
        string $chargeId,
        ?int $page = null,
        ?int $size = null
    ): ListChargeTransactionsResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/charges/{charge_id}/transactions')
            ->auth('global')
            ->parameters(
                TemplateParam::init('charge_id', $chargeId),
                QueryParam::init('page', $page),
                QueryParam::init('size', $size)
            );

        $_resHandler = $this->responseHandler()->type(ListChargeTransactionsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string $status
     * @param \DateTime|null $createdSince
     * @param \DateTime|null $createdUntil
     *
     * @return GetChargesSummaryResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getChargesSummary(
        string $status,
        ?\DateTime $createdSince = null,
        ?\DateTime $createdUntil = null
    ): GetChargesSummaryResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/charges/summary')
            ->auth('global')
            ->parameters(
                QueryParam::init('status', $status),
                QueryParam::init('created_since', $createdSince)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime']),
                QueryParam::init('created_until', $createdUntil)
                    ->serializeBy([DateTimeHelper::class, 'toRfc3339DateTime'])
            );

        $_resHandler = $this->responseHandler()->type(GetChargesSummaryResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
