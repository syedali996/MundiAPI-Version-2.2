<?php

declare(strict_types=1);

/*
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MundiAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use CoreInterfaces\Core\Request\RequestMethod;
use MundiAPILib\Exceptions\ApiException;
use MundiAPILib\Models\CreateAccessTokenRequest;
use MundiAPILib\Models\CreateAddressRequest;
use MundiAPILib\Models\CreateCardRequest;
use MundiAPILib\Models\CreateCustomerRequest;
use MundiAPILib\Models\GetAccessTokenResponse;
use MundiAPILib\Models\GetAddressResponse;
use MundiAPILib\Models\GetCardResponse;
use MundiAPILib\Models\GetCustomerResponse;
use MundiAPILib\Models\ListAccessTokensResponse;
use MundiAPILib\Models\ListAddressesResponse;
use MundiAPILib\Models\ListCardsResponse;
use MundiAPILib\Models\ListCustomersResponse;
use MundiAPILib\Models\UpdateAddressRequest;
use MundiAPILib\Models\UpdateCardRequest;
use MundiAPILib\Models\UpdateCustomerRequest;
use MundiAPILib\Models\UpdateMetadataRequest;

class CustomersController extends BaseController
{
    /**
     * Creates a access token for a customer
     *
     * @param string $customerId Customer Id
     * @param CreateAccessTokenRequest $request Request for creating a access token
     * @param string|null $idempotencyKey
     *
     * @return GetAccessTokenResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createAccessToken(
        string $customerId,
        CreateAccessTokenRequest $request,
        ?string $idempotencyKey = null
    ): GetAccessTokenResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/customers/{customer_id}/access-tokens')
            ->auth('global')
            ->parameters(
                TemplateParam::init('customer_id', $customerId),
                BodyParam::init($request),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetAccessTokenResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Updates a customer
     *
     * @param string $customerId Customer id
     * @param UpdateCustomerRequest $request Request for updating a customer
     * @param string|null $idempotencyKey
     *
     * @return GetCustomerResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateCustomer(
        string $customerId,
        UpdateCustomerRequest $request,
        ?string $idempotencyKey = null
    ): GetCustomerResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/customers/{customer_id}')
            ->auth('global')
            ->parameters(
                TemplateParam::init('customer_id', $customerId),
                BodyParam::init($request),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetCustomerResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete a Customer's access tokens
     *
     * @param string $customerId Customer Id
     *
     * @return ListAccessTokensResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteAccessTokens(string $customerId): ListAccessTokensResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/customers/{customer_id}/access-tokens/')
            ->auth('global')
            ->parameters(TemplateParam::init('customer_id', $customerId));

        $_resHandler = $this->responseHandler()->type(ListAccessTokensResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get a customer
     *
     * @param string $customerId Customer Id
     *
     * @return GetCustomerResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getCustomer(string $customerId): GetCustomerResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/customers/{customer_id}')
            ->auth('global')
            ->parameters(TemplateParam::init('customer_id', $customerId));

        $_resHandler = $this->responseHandler()->type(GetCustomerResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Gets all adressess from a customer
     *
     * @param string $customerId Customer id
     * @param int|null $page Page number
     * @param int|null $size Page size
     *
     * @return ListAddressesResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getAddresses(string $customerId, ?int $page = null, ?int $size = null): ListAddressesResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/customers/{customer_id}/addresses')
            ->auth('global')
            ->parameters(
                TemplateParam::init('customer_id', $customerId),
                QueryParam::init('page', $page),
                QueryParam::init('size', $size)
            );

        $_resHandler = $this->responseHandler()->type(ListAddressesResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get a Customer's access token
     *
     * @param string $customerId Customer Id
     * @param string $tokenId Token Id
     *
     * @return GetAccessTokenResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getAccessToken(string $customerId, string $tokenId): GetAccessTokenResponse
    {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/customers/{customer_id}/access-tokens/{token_id}'
        )
            ->auth('global')
            ->parameters(
                TemplateParam::init('customer_id', $customerId),
                TemplateParam::init('token_id', $tokenId)
            );

        $_resHandler = $this->responseHandler()->type(GetAccessTokenResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get a customer's address
     *
     * @param string $customerId Customer id
     * @param string $addressId Address Id
     *
     * @return GetAddressResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getAddress(string $customerId, string $addressId): GetAddressResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/customers/{customer_id}/addresses/{address_id}')
            ->auth('global')
            ->parameters(
                TemplateParam::init('customer_id', $customerId),
                TemplateParam::init('address_id', $addressId)
            );

        $_resHandler = $this->responseHandler()->type(GetAddressResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Creates a new card for a customer
     *
     * @param string $customerId Customer id
     * @param CreateCardRequest $request Request for creating a card
     * @param string|null $idempotencyKey
     *
     * @return GetCardResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createCard(
        string $customerId,
        CreateCardRequest $request,
        ?string $idempotencyKey = null
    ): GetCardResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/customers/{customer_id}/cards')
            ->auth('global')
            ->parameters(
                TemplateParam::init('customer_id', $customerId),
                BodyParam::init($request),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetCardResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Renew a card
     *
     * @param string $customerId Customer id
     * @param string $cardId Card Id
     * @param string|null $idempotencyKey
     *
     * @return GetCardResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function renewCard(string $customerId, string $cardId, ?string $idempotencyKey = null): GetCardResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/customers/{customer_id}/cards/{card_id}/renew')
            ->auth('global')
            ->parameters(
                TemplateParam::init('customer_id', $customerId),
                TemplateParam::init('card_id', $cardId),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetCardResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Creates a new customer
     *
     * @param CreateCustomerRequest $request Request for creating a customer
     * @param string|null $idempotencyKey
     *
     * @return GetCustomerResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createCustomer(CreateCustomerRequest $request, ?string $idempotencyKey = null): GetCustomerResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/customers')
            ->auth('global')
            ->parameters(BodyParam::init($request), HeaderParam::init('idempotency-key', $idempotencyKey));

        $_resHandler = $this->responseHandler()->type(GetCustomerResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Updates an address
     *
     * @param string $customerId Customer Id
     * @param string $addressId Address Id
     * @param UpdateAddressRequest $request Request for updating an address
     * @param string|null $idempotencyKey
     *
     * @return GetAddressResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateAddress(
        string $customerId,
        string $addressId,
        UpdateAddressRequest $request,
        ?string $idempotencyKey = null
    ): GetAddressResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/customers/{customer_id}/addresses/{address_id}')
            ->auth('global')
            ->parameters(
                TemplateParam::init('customer_id', $customerId),
                TemplateParam::init('address_id', $addressId),
                BodyParam::init($request),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetAddressResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get all access tokens from a customer
     *
     * @param string $customerId Customer Id
     * @param int|null $page Page number
     * @param int|null $size Page size
     *
     * @return ListAccessTokensResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getAccessTokens(string $customerId, ?int $page = null, ?int $size = null): ListAccessTokensResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/customers/{customer_id}/access-tokens')
            ->auth('global')
            ->parameters(
                TemplateParam::init('customer_id', $customerId),
                QueryParam::init('page', $page),
                QueryParam::init('size', $size)
            );

        $_resHandler = $this->responseHandler()->type(ListAccessTokensResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Updates the metadata a customer
     *
     * @param string $customerId The customer id
     * @param UpdateMetadataRequest $request Request for updating the customer metadata
     * @param string|null $idempotencyKey
     *
     * @return GetCustomerResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateCustomerMetadata(
        string $customerId,
        UpdateMetadataRequest $request,
        ?string $idempotencyKey = null
    ): GetCustomerResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/Customers/{customer_id}/metadata')
            ->auth('global')
            ->parameters(
                TemplateParam::init('customer_id', $customerId),
                BodyParam::init($request),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetCustomerResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete a Customer's address
     *
     * @param string $customerId Customer Id
     * @param string $addressId Address Id
     * @param string|null $idempotencyKey
     *
     * @return GetAddressResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteAddress(
        string $customerId,
        string $addressId,
        ?string $idempotencyKey = null
    ): GetAddressResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::DELETE,
            '/customers/{customer_id}/addresses/{address_id}'
        )
            ->auth('global')
            ->parameters(
                TemplateParam::init('customer_id', $customerId),
                TemplateParam::init('address_id', $addressId),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetAddressResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Updates a card
     *
     * @param string $customerId Customer Id
     * @param string $cardId Card id
     * @param UpdateCardRequest $request Request for updating a card
     * @param string|null $idempotencyKey
     *
     * @return GetCardResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateCard(
        string $customerId,
        string $cardId,
        UpdateCardRequest $request,
        ?string $idempotencyKey = null
    ): GetCardResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/customers/{customer_id}/cards/{card_id}')
            ->auth('global')
            ->parameters(
                TemplateParam::init('customer_id', $customerId),
                TemplateParam::init('card_id', $cardId),
                BodyParam::init($request),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetCardResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete a customer's access token
     *
     * @param string $customerId Customer Id
     * @param string $tokenId Token Id
     * @param string|null $idempotencyKey
     *
     * @return GetAccessTokenResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteAccessToken(
        string $customerId,
        string $tokenId,
        ?string $idempotencyKey = null
    ): GetAccessTokenResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::DELETE,
            '/customers/{customer_id}/access-tokens/{token_id}'
        )
            ->auth('global')
            ->parameters(
                TemplateParam::init('customer_id', $customerId),
                TemplateParam::init('token_id', $tokenId),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetAccessTokenResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Creates a new address for a customer
     *
     * @param string $customerId Customer Id
     * @param CreateAddressRequest $request Request for creating an address
     * @param string|null $idempotencyKey
     *
     * @return GetAddressResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createAddress(
        string $customerId,
        CreateAddressRequest $request,
        ?string $idempotencyKey = null
    ): GetAddressResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/customers/{customer_id}/addresses')
            ->auth('global')
            ->parameters(
                TemplateParam::init('customer_id', $customerId),
                BodyParam::init($request),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetAddressResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get a customer's card
     *
     * @param string $customerId Customer id
     * @param string $cardId Card id
     *
     * @return GetCardResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getCard(string $customerId, string $cardId): GetCardResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/customers/{customer_id}/cards/{card_id}')
            ->auth('global')
            ->parameters(TemplateParam::init('customer_id', $customerId), TemplateParam::init('card_id', $cardId));

        $_resHandler = $this->responseHandler()->type(GetCardResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get all cards from a customer
     *
     * @param string $customerId Customer Id
     * @param int|null $page Page number
     * @param int|null $size Page size
     *
     * @return ListCardsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getCards(string $customerId, ?int $page = null, ?int $size = null): ListCardsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/customers/{customer_id}/cards')
            ->auth('global')
            ->parameters(
                TemplateParam::init('customer_id', $customerId),
                QueryParam::init('page', $page),
                QueryParam::init('size', $size)
            );

        $_resHandler = $this->responseHandler()->type(ListCardsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete a customer's card
     *
     * @param string $customerId Customer Id
     * @param string $cardId Card Id
     * @param string|null $idempotencyKey
     *
     * @return GetCardResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteCard(string $customerId, string $cardId, ?string $idempotencyKey = null): GetCardResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/customers/{customer_id}/cards/{card_id}')
            ->auth('global')
            ->parameters(
                TemplateParam::init('customer_id', $customerId),
                TemplateParam::init('card_id', $cardId),
                HeaderParam::init('idempotency-key', $idempotencyKey)
            );

        $_resHandler = $this->responseHandler()->type(GetCardResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Get all Customers
     *
     * @param string|null $name Name of the Customer
     * @param string|null $document Document of the Customer
     * @param int|null $page Current page the the search
     * @param int|null $size Quantity pages of the search
     * @param string|null $email Customer's email
     * @param string|null $code Customer's code
     *
     * @return ListCustomersResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getCustomers(
        ?string $name = null,
        ?string $document = null,
        ?int $page = 1,
        ?int $size = 10,
        ?string $email = null,
        ?string $code = null
    ): ListCustomersResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/customers')
            ->auth('global')
            ->parameters(
                QueryParam::init('name', $name),
                QueryParam::init('document', $document),
                QueryParam::init('page', $page),
                QueryParam::init('size', $size),
                QueryParam::init('email', $email),
                QueryParam::init('Code', $code)
            );

        $_resHandler = $this->responseHandler()->type(ListCustomersResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
