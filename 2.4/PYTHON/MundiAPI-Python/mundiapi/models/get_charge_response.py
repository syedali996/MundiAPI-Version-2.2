# -*- coding: utf-8 -*-

"""
mundiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mundiapi.api_helper import APIHelper
from mundiapi.models.get_customer_response import GetCustomerResponse
from mundiapi.models.get_invoice_response import *
from mundiapi.models.get_order_response import *
from mundiapi.models.get_transaction_response import GetTransactionResponse


class GetChargeResponse(object):

    """Implementation of the 'GetChargeResponse' model.

    Response object for getting a charge

    Attributes:
        id (string): TODO: type description here.
        code (string): TODO: type description here.
        gateway_id (string): TODO: type description here.
        amount (int): TODO: type description here.
        status (string): TODO: type description here.
        currency (string): TODO: type description here.
        payment_method (string): TODO: type description here.
        due_at (datetime): TODO: type description here.
        created_at (datetime): TODO: type description here.
        updated_at (datetime): TODO: type description here.
        last_transaction (GetTransactionResponse): TODO: type description
            here.
        invoice (GetInvoiceResponse): TODO: type description here.
        order (GetOrderResponse): TODO: type description here.
        customer (GetCustomerResponse): TODO: type description here.
        metadata (dict): TODO: type description here.
        paid_at (datetime): TODO: type description here.
        canceled_at (datetime): TODO: type description here.
        canceled_amount (int): Canceled Amount
        paid_amount (int): Paid amount
        recurrency_cycle (string): Defines whether the card has been used one
            or more times.
        interest_and_fine_paid (int): interest and fine paid

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "code": 'code',
        "gateway_id": 'gateway_id',
        "amount": 'amount',
        "status": 'status',
        "currency": 'currency',
        "payment_method": 'payment_method',
        "due_at": 'due_at',
        "created_at": 'created_at',
        "updated_at": 'updated_at',
        "metadata": 'metadata',
        "canceled_amount": 'canceled_amount',
        "paid_amount": 'paid_amount',
        "last_transaction": 'last_transaction',
        "invoice": 'invoice',
        "order": 'order',
        "customer": 'customer',
        "paid_at": 'paid_at',
        "canceled_at": 'canceled_at',
        "recurrency_cycle": 'recurrency_cycle',
        "interest_and_fine_paid": 'interest_and_fine_paid'
    }

    _optionals = [
        'last_transaction',
        'invoice',
        'order',
        'customer',
        'paid_at',
        'canceled_at',
        'recurrency_cycle',
        'interest_and_fine_paid',
    ]

    def __init__(self,
                 id=None,
                 code=None,
                 gateway_id=None,
                 amount=None,
                 status=None,
                 currency=None,
                 payment_method=None,
                 due_at=None,
                 created_at=None,
                 updated_at=None,
                 metadata=None,
                 canceled_amount=None,
                 paid_amount=None,
                 last_transaction=APIHelper.SKIP,
                 invoice=APIHelper.SKIP,
                 order=APIHelper.SKIP,
                 customer=APIHelper.SKIP,
                 paid_at=APIHelper.SKIP,
                 canceled_at=APIHelper.SKIP,
                 recurrency_cycle=APIHelper.SKIP,
                 interest_and_fine_paid=APIHelper.SKIP):
        """Constructor for the GetChargeResponse class"""

        # Initialize members of the class
        self.id = id 
        self.code = code 
        self.gateway_id = gateway_id 
        self.amount = amount 
        self.status = status 
        self.currency = currency 
        self.payment_method = payment_method 
        self.due_at = APIHelper.RFC3339DateTime(due_at) if due_at else None 
        self.created_at = APIHelper.RFC3339DateTime(created_at) if created_at else None 
        self.updated_at = APIHelper.RFC3339DateTime(updated_at) if updated_at else None 
        if last_transaction is not APIHelper.SKIP:
            self.last_transaction = last_transaction 
        if invoice is not APIHelper.SKIP:
            self.invoice = invoice 
        if order is not APIHelper.SKIP:
            self.order = order 
        if customer is not APIHelper.SKIP:
            self.customer = customer 
        self.metadata = metadata 
        if paid_at is not APIHelper.SKIP:
            self.paid_at = APIHelper.RFC3339DateTime(paid_at) if paid_at else None 
        if canceled_at is not APIHelper.SKIP:
            self.canceled_at = APIHelper.RFC3339DateTime(canceled_at) if canceled_at else None 
        self.canceled_amount = canceled_amount 
        self.paid_amount = paid_amount 
        if recurrency_cycle is not APIHelper.SKIP:
            self.recurrency_cycle = recurrency_cycle 
        if interest_and_fine_paid is not APIHelper.SKIP:
            self.interest_and_fine_paid = interest_and_fine_paid 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get("id") if dictionary.get("id") else None
        code = dictionary.get("code") if dictionary.get("code") else None
        gateway_id = dictionary.get("gateway_id") if dictionary.get("gateway_id") else None
        amount = dictionary.get("amount") if dictionary.get("amount") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        currency = dictionary.get("currency") if dictionary.get("currency") else None
        payment_method = dictionary.get("payment_method") if dictionary.get("payment_method") else None
        due_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("due_at")).datetime if dictionary.get("due_at") else None
        created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("created_at")).datetime if dictionary.get("created_at") else None
        updated_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("updated_at")).datetime if dictionary.get("updated_at") else None
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else None
        canceled_amount = dictionary.get("canceled_amount") if dictionary.get("canceled_amount") else None
        paid_amount = dictionary.get("paid_amount") if dictionary.get("paid_amount") else None
        last_transaction = GetTransactionResponse.from_dictionary(dictionary.get('last_transaction')) if 'last_transaction' in dictionary.keys() else APIHelper.SKIP 
        invoice = GetInvoiceResponse.from_dictionary(dictionary.get('invoice')) if 'invoice' in dictionary.keys() else APIHelper.SKIP 
        order = GetOrderResponse.from_dictionary(dictionary.get('order')) if 'order' in dictionary.keys() else APIHelper.SKIP 
        customer = GetCustomerResponse.from_dictionary(dictionary.get('customer')) if 'customer' in dictionary.keys() else APIHelper.SKIP 
        paid_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("paid_at")).datetime if dictionary.get("paid_at") else APIHelper.SKIP
        canceled_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("canceled_at")).datetime if dictionary.get("canceled_at") else APIHelper.SKIP
        recurrency_cycle = dictionary.get("recurrency_cycle") if dictionary.get("recurrency_cycle") else APIHelper.SKIP
        interest_and_fine_paid = dictionary.get("interest_and_fine_paid") if dictionary.get("interest_and_fine_paid") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   code,
                   gateway_id,
                   amount,
                   status,
                   currency,
                   payment_method,
                   due_at,
                   created_at,
                   updated_at,
                   metadata,
                   canceled_amount,
                   paid_amount,
                   last_transaction,
                   invoice,
                   order,
                   customer,
                   paid_at,
                   canceled_at,
                   recurrency_cycle,
                   interest_and_fine_paid)
