# -*- coding: utf-8 -*-

"""
mundiapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from mundiapi.configuration import Configuration
from mundiapi.controllers.base_controller import BaseController
from mundiapi.configuration import Environment
from mundiapi.http.auth.basic_auth import BasicAuth
from mundiapi.controllers.customers_controller import CustomersController
from mundiapi.controllers.charges_controller import ChargesController
from mundiapi.controllers.recipients_controller import RecipientsController
from mundiapi.controllers.subscriptions_controller\
    import SubscriptionsController
from mundiapi.controllers.invoices_controller import InvoicesController
from mundiapi.controllers.orders_controller import OrdersController
from mundiapi.controllers.tokens_controller import TokensController
from mundiapi.controllers.plans_controller import PlansController
from mundiapi.controllers.transactions_controller import TransactionsController
from mundiapi.controllers.transfers_controller import TransfersController


class MundiapiClient(object):

    @LazyProperty
    def customers(self):
        return CustomersController(self.global_configuration)

    @LazyProperty
    def charges(self):
        return ChargesController(self.global_configuration)

    @LazyProperty
    def recipients(self):
        return RecipientsController(self.global_configuration)

    @LazyProperty
    def subscriptions(self):
        return SubscriptionsController(self.global_configuration)

    @LazyProperty
    def invoices(self):
        return InvoicesController(self.global_configuration)

    @LazyProperty
    def orders(self):
        return OrdersController(self.global_configuration)

    @LazyProperty
    def tokens(self):
        return TokensController(self.global_configuration)

    @LazyProperty
    def plans(self):
        return PlansController(self.global_configuration)

    @LazyProperty
    def transactions(self):
        return TransactionsController(self.global_configuration)

    @LazyProperty
    def transfers(self):
        return TransfersController(self.global_configuration)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=[408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
                 retry_methods=['GET', 'PUT'],
                 environment=Environment.PRODUCTION,
                 basic_auth_user_name='TODO: Replace',
                 basic_auth_password='TODO: Replace', config=None):
        if config is None:
            self.config = Configuration(
                                         http_client_instance=http_client_instance,
                                         override_http_client_configuration=override_http_client_configuration,
                                         http_call_back=http_call_back,
                                         timeout=timeout,
                                         max_retries=max_retries,
                                         backoff_factor=backoff_factor,
                                         retry_statuses=retry_statuses,
                                         retry_methods=retry_methods,
                                         environment=environment,
                                         basic_auth_user_name=basic_auth_user_name,
                                         basic_auth_password=basic_auth_password)
        else:
            self.config = config

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())
        self.initialize_auth_managers(self.global_configuration)

        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

    def initialize_auth_managers(self, global_config):
        http_client_config = global_config.get_http_client_configuration()
        self.auth_managers = { key: None for key in ['global']}
        self.auth_managers['global'] = BasicAuth(http_client_config.basic_auth_user_name, http_client_config.basic_auth_password)
        return self.auth_managers
