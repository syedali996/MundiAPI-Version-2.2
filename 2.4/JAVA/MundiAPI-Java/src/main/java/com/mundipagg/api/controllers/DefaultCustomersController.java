/*
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.mundipagg.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.mundipagg.api.ApiHelper;
import com.mundipagg.api.Server;
import com.mundipagg.api.exceptions.ApiException;
import com.mundipagg.api.http.request.HttpMethod;
import com.mundipagg.api.models.CreateAccessTokenRequest;
import com.mundipagg.api.models.CreateAddressRequest;
import com.mundipagg.api.models.CreateCardRequest;
import com.mundipagg.api.models.CreateCustomerRequest;
import com.mundipagg.api.models.GetAccessTokenResponse;
import com.mundipagg.api.models.GetAddressResponse;
import com.mundipagg.api.models.GetCardResponse;
import com.mundipagg.api.models.GetCustomerResponse;
import com.mundipagg.api.models.ListAccessTokensResponse;
import com.mundipagg.api.models.ListAddressesResponse;
import com.mundipagg.api.models.ListCardsResponse;
import com.mundipagg.api.models.ListCustomersResponse;
import com.mundipagg.api.models.UpdateAddressRequest;
import com.mundipagg.api.models.UpdateCardRequest;
import com.mundipagg.api.models.UpdateCustomerRequest;
import com.mundipagg.api.models.UpdateMetadataRequest;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DefaultCustomersController extends BaseController implements CustomersController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public DefaultCustomersController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Creates a access token for a customer.
     * @param  customerId  Required parameter: Customer Id
     * @param  request  Required parameter: Request for creating a access token
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetAccessTokenResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAccessTokenResponse createAccessToken(
            final String customerId,
            final CreateAccessTokenRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        return prepareCreateAccessTokenRequest(customerId, request, idempotencyKey).execute();
    }

    /**
     * Builds the ApiCall object for createAccessToken.
     */
    private ApiCall<GetAccessTokenResponse, ApiException> prepareCreateAccessTokenRequest(
            final String customerId,
            final CreateAccessTokenRequest request,
            final String idempotencyKey) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GetAccessTokenResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/customers/{customer_id}/access-tokens")
                        .bodyParam(param -> param.value(request))
                        .bodySerializer(() ->  ApiHelper.serialize(request))
                        .templateParam(param -> param.key("customer_id").value(customerId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("idempotency-key")
                                .value(idempotencyKey).isRequired(false))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetAccessTokenResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Updates a customer.
     * @param  customerId  Required parameter: Customer id
     * @param  request  Required parameter: Request for updating a customer
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetCustomerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetCustomerResponse updateCustomer(
            final String customerId,
            final UpdateCustomerRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        return prepareUpdateCustomerRequest(customerId, request, idempotencyKey).execute();
    }

    /**
     * Builds the ApiCall object for updateCustomer.
     */
    private ApiCall<GetCustomerResponse, ApiException> prepareUpdateCustomerRequest(
            final String customerId,
            final UpdateCustomerRequest request,
            final String idempotencyKey) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GetCustomerResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/customers/{customer_id}")
                        .bodyParam(param -> param.value(request))
                        .bodySerializer(() ->  ApiHelper.serialize(request))
                        .templateParam(param -> param.key("customer_id").value(customerId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("idempotency-key")
                                .value(idempotencyKey).isRequired(false))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetCustomerResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete a Customer's access tokens.
     * @param  customerId  Required parameter: Customer Id
     * @return    Returns the ListAccessTokensResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListAccessTokensResponse deleteAccessTokens(
            final String customerId) throws ApiException, IOException {
        return prepareDeleteAccessTokensRequest(customerId).execute();
    }

    /**
     * Builds the ApiCall object for deleteAccessTokens.
     */
    private ApiCall<ListAccessTokensResponse, ApiException> prepareDeleteAccessTokensRequest(
            final String customerId) throws IOException {
        return new ApiCall.Builder<ListAccessTokensResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/customers/{customer_id}/access-tokens/")
                        .templateParam(param -> param.key("customer_id").value(customerId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ListAccessTokensResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a customer.
     * @param  customerId  Required parameter: Customer Id
     * @return    Returns the GetCustomerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetCustomerResponse getCustomer(
            final String customerId) throws ApiException, IOException {
        return prepareGetCustomerRequest(customerId).execute();
    }

    /**
     * Builds the ApiCall object for getCustomer.
     */
    private ApiCall<GetCustomerResponse, ApiException> prepareGetCustomerRequest(
            final String customerId) throws IOException {
        return new ApiCall.Builder<GetCustomerResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/customers/{customer_id}")
                        .templateParam(param -> param.key("customer_id").value(customerId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetCustomerResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Gets all adressess from a customer.
     * @param  customerId  Required parameter: Customer id
     * @param  page  Optional parameter: Page number
     * @param  size  Optional parameter: Page size
     * @return    Returns the ListAddressesResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListAddressesResponse getAddresses(
            final String customerId,
            final Integer page,
            final Integer size) throws ApiException, IOException {
        return prepareGetAddressesRequest(customerId, page, size).execute();
    }

    /**
     * Builds the ApiCall object for getAddresses.
     */
    private ApiCall<ListAddressesResponse, ApiException> prepareGetAddressesRequest(
            final String customerId,
            final Integer page,
            final Integer size) throws IOException {
        return new ApiCall.Builder<ListAddressesResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/customers/{customer_id}/addresses")
                        .queryParam(param -> param.key("page")
                                .value(page).isRequired(false))
                        .queryParam(param -> param.key("size")
                                .value(size).isRequired(false))
                        .templateParam(param -> param.key("customer_id").value(customerId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ListAddressesResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a Customer's access token.
     * @param  customerId  Required parameter: Customer Id
     * @param  tokenId  Required parameter: Token Id
     * @return    Returns the GetAccessTokenResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAccessTokenResponse getAccessToken(
            final String customerId,
            final String tokenId) throws ApiException, IOException {
        return prepareGetAccessTokenRequest(customerId, tokenId).execute();
    }

    /**
     * Builds the ApiCall object for getAccessToken.
     */
    private ApiCall<GetAccessTokenResponse, ApiException> prepareGetAccessTokenRequest(
            final String customerId,
            final String tokenId) throws IOException {
        return new ApiCall.Builder<GetAccessTokenResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/customers/{customer_id}/access-tokens/{token_id}")
                        .templateParam(param -> param.key("customer_id").value(customerId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("token_id").value(tokenId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetAccessTokenResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a customer's address.
     * @param  customerId  Required parameter: Customer id
     * @param  addressId  Required parameter: Address Id
     * @return    Returns the GetAddressResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAddressResponse getAddress(
            final String customerId,
            final String addressId) throws ApiException, IOException {
        return prepareGetAddressRequest(customerId, addressId).execute();
    }

    /**
     * Builds the ApiCall object for getAddress.
     */
    private ApiCall<GetAddressResponse, ApiException> prepareGetAddressRequest(
            final String customerId,
            final String addressId) throws IOException {
        return new ApiCall.Builder<GetAddressResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/customers/{customer_id}/addresses/{address_id}")
                        .templateParam(param -> param.key("customer_id").value(customerId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("address_id").value(addressId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetAddressResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a new card for a customer.
     * @param  customerId  Required parameter: Customer id
     * @param  request  Required parameter: Request for creating a card
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetCardResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetCardResponse createCard(
            final String customerId,
            final CreateCardRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        return prepareCreateCardRequest(customerId, request, idempotencyKey).execute();
    }

    /**
     * Builds the ApiCall object for createCard.
     */
    private ApiCall<GetCardResponse, ApiException> prepareCreateCardRequest(
            final String customerId,
            final CreateCardRequest request,
            final String idempotencyKey) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GetCardResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/customers/{customer_id}/cards")
                        .bodyParam(param -> param.value(request))
                        .bodySerializer(() ->  ApiHelper.serialize(request))
                        .templateParam(param -> param.key("customer_id").value(customerId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("idempotency-key")
                                .value(idempotencyKey).isRequired(false))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetCardResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Renew a card.
     * @param  customerId  Required parameter: Customer id
     * @param  cardId  Required parameter: Card Id
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetCardResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetCardResponse renewCard(
            final String customerId,
            final String cardId,
            final String idempotencyKey) throws ApiException, IOException {
        return prepareRenewCardRequest(customerId, cardId, idempotencyKey).execute();
    }

    /**
     * Builds the ApiCall object for renewCard.
     */
    private ApiCall<GetCardResponse, ApiException> prepareRenewCardRequest(
            final String customerId,
            final String cardId,
            final String idempotencyKey) throws IOException {
        return new ApiCall.Builder<GetCardResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/customers/{customer_id}/cards/{card_id}/renew")
                        .templateParam(param -> param.key("customer_id").value(customerId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("card_id").value(cardId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("idempotency-key")
                                .value(idempotencyKey).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetCardResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a new customer.
     * @param  request  Required parameter: Request for creating a customer
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetCustomerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetCustomerResponse createCustomer(
            final CreateCustomerRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        return prepareCreateCustomerRequest(request, idempotencyKey).execute();
    }

    /**
     * Builds the ApiCall object for createCustomer.
     */
    private ApiCall<GetCustomerResponse, ApiException> prepareCreateCustomerRequest(
            final CreateCustomerRequest request,
            final String idempotencyKey) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GetCustomerResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/customers")
                        .bodyParam(param -> param.value(request))
                        .bodySerializer(() ->  ApiHelper.serialize(request))
                        .headerParam(param -> param.key("idempotency-key")
                                .value(idempotencyKey).isRequired(false))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetCustomerResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Updates an address.
     * @param  customerId  Required parameter: Customer Id
     * @param  addressId  Required parameter: Address Id
     * @param  request  Required parameter: Request for updating an address
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetAddressResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAddressResponse updateAddress(
            final String customerId,
            final String addressId,
            final UpdateAddressRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        return prepareUpdateAddressRequest(customerId, addressId, request,
                idempotencyKey).execute();
    }

    /**
     * Builds the ApiCall object for updateAddress.
     */
    private ApiCall<GetAddressResponse, ApiException> prepareUpdateAddressRequest(
            final String customerId,
            final String addressId,
            final UpdateAddressRequest request,
            final String idempotencyKey) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GetAddressResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/customers/{customer_id}/addresses/{address_id}")
                        .bodyParam(param -> param.value(request))
                        .bodySerializer(() ->  ApiHelper.serialize(request))
                        .templateParam(param -> param.key("customer_id").value(customerId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("address_id").value(addressId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("idempotency-key")
                                .value(idempotencyKey).isRequired(false))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetAddressResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get all access tokens from a customer.
     * @param  customerId  Required parameter: Customer Id
     * @param  page  Optional parameter: Page number
     * @param  size  Optional parameter: Page size
     * @return    Returns the ListAccessTokensResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListAccessTokensResponse getAccessTokens(
            final String customerId,
            final Integer page,
            final Integer size) throws ApiException, IOException {
        return prepareGetAccessTokensRequest(customerId, page, size).execute();
    }

    /**
     * Builds the ApiCall object for getAccessTokens.
     */
    private ApiCall<ListAccessTokensResponse, ApiException> prepareGetAccessTokensRequest(
            final String customerId,
            final Integer page,
            final Integer size) throws IOException {
        return new ApiCall.Builder<ListAccessTokensResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/customers/{customer_id}/access-tokens")
                        .queryParam(param -> param.key("page")
                                .value(page).isRequired(false))
                        .queryParam(param -> param.key("size")
                                .value(size).isRequired(false))
                        .templateParam(param -> param.key("customer_id").value(customerId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ListAccessTokensResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Updates the metadata a customer.
     * @param  customerId  Required parameter: The customer id
     * @param  request  Required parameter: Request for updating the customer metadata
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetCustomerResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetCustomerResponse updateCustomerMetadata(
            final String customerId,
            final UpdateMetadataRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        return prepareUpdateCustomerMetadataRequest(customerId, request, idempotencyKey).execute();
    }

    /**
     * Builds the ApiCall object for updateCustomerMetadata.
     */
    private ApiCall<GetCustomerResponse, ApiException> prepareUpdateCustomerMetadataRequest(
            final String customerId,
            final UpdateMetadataRequest request,
            final String idempotencyKey) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GetCustomerResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/Customers/{customer_id}/metadata")
                        .bodyParam(param -> param.value(request))
                        .bodySerializer(() ->  ApiHelper.serialize(request))
                        .templateParam(param -> param.key("customer_id").value(customerId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("idempotency-key")
                                .value(idempotencyKey).isRequired(false))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetCustomerResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete a Customer's address.
     * @param  customerId  Required parameter: Customer Id
     * @param  addressId  Required parameter: Address Id
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetAddressResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAddressResponse deleteAddress(
            final String customerId,
            final String addressId,
            final String idempotencyKey) throws ApiException, IOException {
        return prepareDeleteAddressRequest(customerId, addressId, idempotencyKey).execute();
    }

    /**
     * Builds the ApiCall object for deleteAddress.
     */
    private ApiCall<GetAddressResponse, ApiException> prepareDeleteAddressRequest(
            final String customerId,
            final String addressId,
            final String idempotencyKey) throws IOException {
        return new ApiCall.Builder<GetAddressResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/customers/{customer_id}/addresses/{address_id}")
                        .templateParam(param -> param.key("customer_id").value(customerId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("address_id").value(addressId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("idempotency-key")
                                .value(idempotencyKey).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetAddressResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Updates a card.
     * @param  customerId  Required parameter: Customer Id
     * @param  cardId  Required parameter: Card id
     * @param  request  Required parameter: Request for updating a card
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetCardResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetCardResponse updateCard(
            final String customerId,
            final String cardId,
            final UpdateCardRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        return prepareUpdateCardRequest(customerId, cardId, request, idempotencyKey).execute();
    }

    /**
     * Builds the ApiCall object for updateCard.
     */
    private ApiCall<GetCardResponse, ApiException> prepareUpdateCardRequest(
            final String customerId,
            final String cardId,
            final UpdateCardRequest request,
            final String idempotencyKey) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GetCardResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/customers/{customer_id}/cards/{card_id}")
                        .bodyParam(param -> param.value(request))
                        .bodySerializer(() ->  ApiHelper.serialize(request))
                        .templateParam(param -> param.key("customer_id").value(customerId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("card_id").value(cardId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("idempotency-key")
                                .value(idempotencyKey).isRequired(false))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetCardResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete a customer's access token.
     * @param  customerId  Required parameter: Customer Id
     * @param  tokenId  Required parameter: Token Id
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetAccessTokenResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAccessTokenResponse deleteAccessToken(
            final String customerId,
            final String tokenId,
            final String idempotencyKey) throws ApiException, IOException {
        return prepareDeleteAccessTokenRequest(customerId, tokenId, idempotencyKey).execute();
    }

    /**
     * Builds the ApiCall object for deleteAccessToken.
     */
    private ApiCall<GetAccessTokenResponse, ApiException> prepareDeleteAccessTokenRequest(
            final String customerId,
            final String tokenId,
            final String idempotencyKey) throws IOException {
        return new ApiCall.Builder<GetAccessTokenResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/customers/{customer_id}/access-tokens/{token_id}")
                        .templateParam(param -> param.key("customer_id").value(customerId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("token_id").value(tokenId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("idempotency-key")
                                .value(idempotencyKey).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetAccessTokenResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a new address for a customer.
     * @param  customerId  Required parameter: Customer Id
     * @param  request  Required parameter: Request for creating an address
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetAddressResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAddressResponse createAddress(
            final String customerId,
            final CreateAddressRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        return prepareCreateAddressRequest(customerId, request, idempotencyKey).execute();
    }

    /**
     * Builds the ApiCall object for createAddress.
     */
    private ApiCall<GetAddressResponse, ApiException> prepareCreateAddressRequest(
            final String customerId,
            final CreateAddressRequest request,
            final String idempotencyKey) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GetAddressResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/customers/{customer_id}/addresses")
                        .bodyParam(param -> param.value(request))
                        .bodySerializer(() ->  ApiHelper.serialize(request))
                        .templateParam(param -> param.key("customer_id").value(customerId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("idempotency-key")
                                .value(idempotencyKey).isRequired(false))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetAddressResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get a customer's card.
     * @param  customerId  Required parameter: Customer id
     * @param  cardId  Required parameter: Card id
     * @return    Returns the GetCardResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetCardResponse getCard(
            final String customerId,
            final String cardId) throws ApiException, IOException {
        return prepareGetCardRequest(customerId, cardId).execute();
    }

    /**
     * Builds the ApiCall object for getCard.
     */
    private ApiCall<GetCardResponse, ApiException> prepareGetCardRequest(
            final String customerId,
            final String cardId) throws IOException {
        return new ApiCall.Builder<GetCardResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/customers/{customer_id}/cards/{card_id}")
                        .templateParam(param -> param.key("customer_id").value(customerId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("card_id").value(cardId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetCardResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get all cards from a customer.
     * @param  customerId  Required parameter: Customer Id
     * @param  page  Optional parameter: Page number
     * @param  size  Optional parameter: Page size
     * @return    Returns the ListCardsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListCardsResponse getCards(
            final String customerId,
            final Integer page,
            final Integer size) throws ApiException, IOException {
        return prepareGetCardsRequest(customerId, page, size).execute();
    }

    /**
     * Builds the ApiCall object for getCards.
     */
    private ApiCall<ListCardsResponse, ApiException> prepareGetCardsRequest(
            final String customerId,
            final Integer page,
            final Integer size) throws IOException {
        return new ApiCall.Builder<ListCardsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/customers/{customer_id}/cards")
                        .queryParam(param -> param.key("page")
                                .value(page).isRequired(false))
                        .queryParam(param -> param.key("size")
                                .value(size).isRequired(false))
                        .templateParam(param -> param.key("customer_id").value(customerId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ListCardsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete a customer's card.
     * @param  customerId  Required parameter: Customer Id
     * @param  cardId  Required parameter: Card Id
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetCardResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetCardResponse deleteCard(
            final String customerId,
            final String cardId,
            final String idempotencyKey) throws ApiException, IOException {
        return prepareDeleteCardRequest(customerId, cardId, idempotencyKey).execute();
    }

    /**
     * Builds the ApiCall object for deleteCard.
     */
    private ApiCall<GetCardResponse, ApiException> prepareDeleteCardRequest(
            final String customerId,
            final String cardId,
            final String idempotencyKey) throws IOException {
        return new ApiCall.Builder<GetCardResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/customers/{customer_id}/cards/{card_id}")
                        .templateParam(param -> param.key("customer_id").value(customerId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("card_id").value(cardId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("idempotency-key")
                                .value(idempotencyKey).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetCardResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get all Customers.
     * @param  name  Optional parameter: Name of the Customer
     * @param  document  Optional parameter: Document of the Customer
     * @param  page  Optional parameter: Current page the the search
     * @param  size  Optional parameter: Quantity pages of the search
     * @param  email  Optional parameter: Customer's email
     * @param  code  Optional parameter: Customer's code
     * @return    Returns the ListCustomersResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListCustomersResponse getCustomers(
            final String name,
            final String document,
            final Integer page,
            final Integer size,
            final String email,
            final String code) throws ApiException, IOException {
        return prepareGetCustomersRequest(name, document, page, size, email, code).execute();
    }

    /**
     * Builds the ApiCall object for getCustomers.
     */
    private ApiCall<ListCustomersResponse, ApiException> prepareGetCustomersRequest(
            final String name,
            final String document,
            final Integer page,
            final Integer size,
            final String email,
            final String code) throws IOException {
        return new ApiCall.Builder<ListCustomersResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/customers")
                        .queryParam(param -> param.key("name")
                                .value(name).isRequired(false))
                        .queryParam(param -> param.key("document")
                                .value(document).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .queryParam(param -> param.key("size")
                                .value((size != null) ? size : 10).isRequired(false))
                        .queryParam(param -> param.key("email")
                                .value(email).isRequired(false))
                        .queryParam(param -> param.key("Code")
                                .value(code).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ListCustomersResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}