/*
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.mundipagg.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.BaseModel;
import java.util.List;

/**
 * This is a model class for CreateCheckoutPaymentRequest type.
 */
public class CreateCheckoutPaymentRequest {
    private List<String> acceptedPaymentMethods;
    private List<Object> acceptedMultiPaymentMethods;
    private String successUrl;
    private String defaultPaymentMethod;
    private String gatewayAffiliationId;
    private CreateCheckoutCreditCardPaymentRequest creditCard;
    private CreateCheckoutDebitCardPaymentRequest debitCard;
    private CreateCheckoutBoletoPaymentRequest boleto;
    private Boolean customerEditable;
    private Integer expiresIn;
    private boolean skipCheckoutSuccessPage;
    private boolean billingAddressEditable;
    private CreateAddressRequest billingAddress;
    private CreateCheckoutBankTransferRequest bankTransfer;
    private List<String> acceptedBrands;

    /**
     * Default constructor.
     */
    public CreateCheckoutPaymentRequest() {
    }

    /**
     * Initialization constructor.
     * @param  acceptedPaymentMethods  List of String value for acceptedPaymentMethods.
     * @param  acceptedMultiPaymentMethods  List of Object value for acceptedMultiPaymentMethods.
     * @param  successUrl  String value for successUrl.
     * @param  skipCheckoutSuccessPage  boolean value for skipCheckoutSuccessPage.
     * @param  billingAddressEditable  boolean value for billingAddressEditable.
     * @param  billingAddress  CreateAddressRequest value for billingAddress.
     * @param  bankTransfer  CreateCheckoutBankTransferRequest value for bankTransfer.
     * @param  acceptedBrands  List of String value for acceptedBrands.
     * @param  defaultPaymentMethod  String value for defaultPaymentMethod.
     * @param  gatewayAffiliationId  String value for gatewayAffiliationId.
     * @param  creditCard  CreateCheckoutCreditCardPaymentRequest value for creditCard.
     * @param  debitCard  CreateCheckoutDebitCardPaymentRequest value for debitCard.
     * @param  boleto  CreateCheckoutBoletoPaymentRequest value for boleto.
     * @param  customerEditable  Boolean value for customerEditable.
     * @param  expiresIn  Integer value for expiresIn.
     */
    public CreateCheckoutPaymentRequest(
            List<String> acceptedPaymentMethods,
            List<Object> acceptedMultiPaymentMethods,
            String successUrl,
            boolean skipCheckoutSuccessPage,
            boolean billingAddressEditable,
            CreateAddressRequest billingAddress,
            CreateCheckoutBankTransferRequest bankTransfer,
            List<String> acceptedBrands,
            String defaultPaymentMethod,
            String gatewayAffiliationId,
            CreateCheckoutCreditCardPaymentRequest creditCard,
            CreateCheckoutDebitCardPaymentRequest debitCard,
            CreateCheckoutBoletoPaymentRequest boleto,
            Boolean customerEditable,
            Integer expiresIn) {
        this.acceptedPaymentMethods = acceptedPaymentMethods;
        this.acceptedMultiPaymentMethods = acceptedMultiPaymentMethods;
        this.successUrl = successUrl;
        this.defaultPaymentMethod = defaultPaymentMethod;
        this.gatewayAffiliationId = gatewayAffiliationId;
        this.creditCard = creditCard;
        this.debitCard = debitCard;
        this.boleto = boleto;
        this.customerEditable = customerEditable;
        this.expiresIn = expiresIn;
        this.skipCheckoutSuccessPage = skipCheckoutSuccessPage;
        this.billingAddressEditable = billingAddressEditable;
        this.billingAddress = billingAddress;
        this.bankTransfer = bankTransfer;
        this.acceptedBrands = acceptedBrands;
    }

    /**
     * Getter for AcceptedPaymentMethods.
     * Accepted Payment Methods
     * @return Returns the List of String
     */
    @JsonGetter("accepted_payment_methods")
    public List<String> getAcceptedPaymentMethods() {
        return acceptedPaymentMethods;
    }

    /**
     * Setter for AcceptedPaymentMethods.
     * Accepted Payment Methods
     * @param acceptedPaymentMethods Value for List of String
     */
    @JsonSetter("accepted_payment_methods")
    public void setAcceptedPaymentMethods(List<String> acceptedPaymentMethods) {
        this.acceptedPaymentMethods = acceptedPaymentMethods;
    }

    /**
     * Getter for AcceptedMultiPaymentMethods.
     * Accepted Multi Payment Methods
     * @return Returns the List of Object
     */
    @JsonGetter("accepted_multi_payment_methods")
    public List<Object> getAcceptedMultiPaymentMethods() {
        return acceptedMultiPaymentMethods;
    }

    /**
     * Setter for AcceptedMultiPaymentMethods.
     * Accepted Multi Payment Methods
     * @param acceptedMultiPaymentMethods Value for List of Object
     */
    @JsonSetter("accepted_multi_payment_methods")
    public void setAcceptedMultiPaymentMethods(List<Object> acceptedMultiPaymentMethods) {
        this.acceptedMultiPaymentMethods = acceptedMultiPaymentMethods;
    }

    /**
     * Getter for SuccessUrl.
     * Success url
     * @return Returns the String
     */
    @JsonGetter("success_url")
    public String getSuccessUrl() {
        return successUrl;
    }

    /**
     * Setter for SuccessUrl.
     * Success url
     * @param successUrl Value for String
     */
    @JsonSetter("success_url")
    public void setSuccessUrl(String successUrl) {
        this.successUrl = successUrl;
    }

    /**
     * Getter for DefaultPaymentMethod.
     * Default payment method
     * @return Returns the String
     */
    @JsonGetter("default_payment_method")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDefaultPaymentMethod() {
        return defaultPaymentMethod;
    }

    /**
     * Setter for DefaultPaymentMethod.
     * Default payment method
     * @param defaultPaymentMethod Value for String
     */
    @JsonSetter("default_payment_method")
    public void setDefaultPaymentMethod(String defaultPaymentMethod) {
        this.defaultPaymentMethod = defaultPaymentMethod;
    }

    /**
     * Getter for GatewayAffiliationId.
     * Gateway Affiliation Id
     * @return Returns the String
     */
    @JsonGetter("gateway_affiliation_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getGatewayAffiliationId() {
        return gatewayAffiliationId;
    }

    /**
     * Setter for GatewayAffiliationId.
     * Gateway Affiliation Id
     * @param gatewayAffiliationId Value for String
     */
    @JsonSetter("gateway_affiliation_id")
    public void setGatewayAffiliationId(String gatewayAffiliationId) {
        this.gatewayAffiliationId = gatewayAffiliationId;
    }

    /**
     * Getter for CreditCard.
     * Credit Card payment request
     * @return Returns the CreateCheckoutCreditCardPaymentRequest
     */
    @JsonGetter("credit_card")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CreateCheckoutCreditCardPaymentRequest getCreditCard() {
        return creditCard;
    }

    /**
     * Setter for CreditCard.
     * Credit Card payment request
     * @param creditCard Value for CreateCheckoutCreditCardPaymentRequest
     */
    @JsonSetter("credit_card")
    public void setCreditCard(CreateCheckoutCreditCardPaymentRequest creditCard) {
        this.creditCard = creditCard;
    }

    /**
     * Getter for DebitCard.
     * Debit Card payment request
     * @return Returns the CreateCheckoutDebitCardPaymentRequest
     */
    @JsonGetter("debit_card")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CreateCheckoutDebitCardPaymentRequest getDebitCard() {
        return debitCard;
    }

    /**
     * Setter for DebitCard.
     * Debit Card payment request
     * @param debitCard Value for CreateCheckoutDebitCardPaymentRequest
     */
    @JsonSetter("debit_card")
    public void setDebitCard(CreateCheckoutDebitCardPaymentRequest debitCard) {
        this.debitCard = debitCard;
    }

    /**
     * Getter for Boleto.
     * Boleto payment request
     * @return Returns the CreateCheckoutBoletoPaymentRequest
     */
    @JsonGetter("boleto")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CreateCheckoutBoletoPaymentRequest getBoleto() {
        return boleto;
    }

    /**
     * Setter for Boleto.
     * Boleto payment request
     * @param boleto Value for CreateCheckoutBoletoPaymentRequest
     */
    @JsonSetter("boleto")
    public void setBoleto(CreateCheckoutBoletoPaymentRequest boleto) {
        this.boleto = boleto;
    }

    /**
     * Getter for CustomerEditable.
     * Customer is editable?
     * @return Returns the Boolean
     */
    @JsonGetter("customer_editable")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getCustomerEditable() {
        return customerEditable;
    }

    /**
     * Setter for CustomerEditable.
     * Customer is editable?
     * @param customerEditable Value for Boolean
     */
    @JsonSetter("customer_editable")
    public void setCustomerEditable(Boolean customerEditable) {
        this.customerEditable = customerEditable;
    }

    /**
     * Getter for ExpiresIn.
     * Time in minutes for expiration
     * @return Returns the Integer
     */
    @JsonGetter("expires_in")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getExpiresIn() {
        return expiresIn;
    }

    /**
     * Setter for ExpiresIn.
     * Time in minutes for expiration
     * @param expiresIn Value for Integer
     */
    @JsonSetter("expires_in")
    public void setExpiresIn(Integer expiresIn) {
        this.expiresIn = expiresIn;
    }

    /**
     * Getter for SkipCheckoutSuccessPage.
     * Skip postpay success screen?
     * @return Returns the boolean
     */
    @JsonGetter("skip_checkout_success_page")
    public boolean getSkipCheckoutSuccessPage() {
        return skipCheckoutSuccessPage;
    }

    /**
     * Setter for SkipCheckoutSuccessPage.
     * Skip postpay success screen?
     * @param skipCheckoutSuccessPage Value for boolean
     */
    @JsonSetter("skip_checkout_success_page")
    public void setSkipCheckoutSuccessPage(boolean skipCheckoutSuccessPage) {
        this.skipCheckoutSuccessPage = skipCheckoutSuccessPage;
    }

    /**
     * Getter for BillingAddressEditable.
     * Billing Address is editable?
     * @return Returns the boolean
     */
    @JsonGetter("billing_address_editable")
    public boolean getBillingAddressEditable() {
        return billingAddressEditable;
    }

    /**
     * Setter for BillingAddressEditable.
     * Billing Address is editable?
     * @param billingAddressEditable Value for boolean
     */
    @JsonSetter("billing_address_editable")
    public void setBillingAddressEditable(boolean billingAddressEditable) {
        this.billingAddressEditable = billingAddressEditable;
    }

    /**
     * Getter for BillingAddress.
     * Billing Address
     * @return Returns the CreateAddressRequest
     */
    @JsonGetter("billing_address")
    public CreateAddressRequest getBillingAddress() {
        return billingAddress;
    }

    /**
     * Setter for BillingAddress.
     * Billing Address
     * @param billingAddress Value for CreateAddressRequest
     */
    @JsonSetter("billing_address")
    public void setBillingAddress(CreateAddressRequest billingAddress) {
        this.billingAddress = billingAddress;
    }

    /**
     * Getter for BankTransfer.
     * Bank Transfer payment request
     * @return Returns the CreateCheckoutBankTransferRequest
     */
    @JsonGetter("bank_transfer")
    public CreateCheckoutBankTransferRequest getBankTransfer() {
        return bankTransfer;
    }

    /**
     * Setter for BankTransfer.
     * Bank Transfer payment request
     * @param bankTransfer Value for CreateCheckoutBankTransferRequest
     */
    @JsonSetter("bank_transfer")
    public void setBankTransfer(CreateCheckoutBankTransferRequest bankTransfer) {
        this.bankTransfer = bankTransfer;
    }

    /**
     * Getter for AcceptedBrands.
     * Accepted Brands
     * @return Returns the List of String
     */
    @JsonGetter("accepted_brands")
    public List<String> getAcceptedBrands() {
        return acceptedBrands;
    }

    /**
     * Setter for AcceptedBrands.
     * Accepted Brands
     * @param acceptedBrands Value for List of String
     */
    @JsonSetter("accepted_brands")
    public void setAcceptedBrands(List<String> acceptedBrands) {
        this.acceptedBrands = acceptedBrands;
    }

    /**
     * Converts this CreateCheckoutPaymentRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CreateCheckoutPaymentRequest [" + "acceptedPaymentMethods=" + acceptedPaymentMethods
                + ", acceptedMultiPaymentMethods=" + acceptedMultiPaymentMethods + ", successUrl="
                + successUrl + ", skipCheckoutSuccessPage=" + skipCheckoutSuccessPage
                + ", billingAddressEditable=" + billingAddressEditable + ", billingAddress="
                + billingAddress + ", bankTransfer=" + bankTransfer + ", acceptedBrands="
                + acceptedBrands + ", defaultPaymentMethod=" + defaultPaymentMethod
                + ", gatewayAffiliationId=" + gatewayAffiliationId + ", creditCard=" + creditCard
                + ", debitCard=" + debitCard + ", boleto=" + boleto + ", customerEditable="
                + customerEditable + ", expiresIn=" + expiresIn + "]";
    }

    /**
     * Builds a new {@link CreateCheckoutPaymentRequest.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link CreateCheckoutPaymentRequest.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(acceptedPaymentMethods, acceptedMultiPaymentMethods,
                successUrl, skipCheckoutSuccessPage, billingAddressEditable, billingAddress,
                bankTransfer, acceptedBrands)
                .defaultPaymentMethod(getDefaultPaymentMethod())
                .gatewayAffiliationId(getGatewayAffiliationId())
                .creditCard(getCreditCard())
                .debitCard(getDebitCard())
                .boleto(getBoleto())
                .customerEditable(getCustomerEditable())
                .expiresIn(getExpiresIn());
        return builder;
    }

    /**
     * Class to build instances of {@link CreateCheckoutPaymentRequest}.
     */
    public static class Builder {
        private List<String> acceptedPaymentMethods;
        private List<Object> acceptedMultiPaymentMethods;
        private String successUrl;
        private boolean skipCheckoutSuccessPage;
        private boolean billingAddressEditable;
        private CreateAddressRequest billingAddress;
        private CreateCheckoutBankTransferRequest bankTransfer;
        private List<String> acceptedBrands;
        private String defaultPaymentMethod;
        private String gatewayAffiliationId;
        private CreateCheckoutCreditCardPaymentRequest creditCard;
        private CreateCheckoutDebitCardPaymentRequest debitCard;
        private CreateCheckoutBoletoPaymentRequest boleto;
        private Boolean customerEditable;
        private Integer expiresIn;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  acceptedPaymentMethods  List of String value for acceptedPaymentMethods.
         * @param  acceptedMultiPaymentMethods  List of Object value for
         *         acceptedMultiPaymentMethods.
         * @param  successUrl  String value for successUrl.
         * @param  skipCheckoutSuccessPage  boolean value for skipCheckoutSuccessPage.
         * @param  billingAddressEditable  boolean value for billingAddressEditable.
         * @param  billingAddress  CreateAddressRequest value for billingAddress.
         * @param  bankTransfer  CreateCheckoutBankTransferRequest value for bankTransfer.
         * @param  acceptedBrands  List of String value for acceptedBrands.
         */
        public Builder(List<String> acceptedPaymentMethods,
                List<Object> acceptedMultiPaymentMethods, String successUrl,
                boolean skipCheckoutSuccessPage, boolean billingAddressEditable,
                CreateAddressRequest billingAddress, CreateCheckoutBankTransferRequest bankTransfer,
                List<String> acceptedBrands) {
            this.acceptedPaymentMethods = acceptedPaymentMethods;
            this.acceptedMultiPaymentMethods = acceptedMultiPaymentMethods;
            this.successUrl = successUrl;
            this.skipCheckoutSuccessPage = skipCheckoutSuccessPage;
            this.billingAddressEditable = billingAddressEditable;
            this.billingAddress = billingAddress;
            this.bankTransfer = bankTransfer;
            this.acceptedBrands = acceptedBrands;
        }

        /**
         * Setter for acceptedPaymentMethods.
         * @param  acceptedPaymentMethods  List of String value for acceptedPaymentMethods.
         * @return Builder
         */
        public Builder acceptedPaymentMethods(List<String> acceptedPaymentMethods) {
            this.acceptedPaymentMethods = acceptedPaymentMethods;
            return this;
        }

        /**
         * Setter for acceptedMultiPaymentMethods.
         * @param  acceptedMultiPaymentMethods  List of Object value for
         *         acceptedMultiPaymentMethods.
         * @return Builder
         */
        public Builder acceptedMultiPaymentMethods(List<Object> acceptedMultiPaymentMethods) {
            this.acceptedMultiPaymentMethods = acceptedMultiPaymentMethods;
            return this;
        }

        /**
         * Setter for successUrl.
         * @param  successUrl  String value for successUrl.
         * @return Builder
         */
        public Builder successUrl(String successUrl) {
            this.successUrl = successUrl;
            return this;
        }

        /**
         * Setter for skipCheckoutSuccessPage.
         * @param  skipCheckoutSuccessPage  boolean value for skipCheckoutSuccessPage.
         * @return Builder
         */
        public Builder skipCheckoutSuccessPage(boolean skipCheckoutSuccessPage) {
            this.skipCheckoutSuccessPage = skipCheckoutSuccessPage;
            return this;
        }

        /**
         * Setter for billingAddressEditable.
         * @param  billingAddressEditable  boolean value for billingAddressEditable.
         * @return Builder
         */
        public Builder billingAddressEditable(boolean billingAddressEditable) {
            this.billingAddressEditable = billingAddressEditable;
            return this;
        }

        /**
         * Setter for billingAddress.
         * @param  billingAddress  CreateAddressRequest value for billingAddress.
         * @return Builder
         */
        public Builder billingAddress(CreateAddressRequest billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }

        /**
         * Setter for bankTransfer.
         * @param  bankTransfer  CreateCheckoutBankTransferRequest value for bankTransfer.
         * @return Builder
         */
        public Builder bankTransfer(CreateCheckoutBankTransferRequest bankTransfer) {
            this.bankTransfer = bankTransfer;
            return this;
        }

        /**
         * Setter for acceptedBrands.
         * @param  acceptedBrands  List of String value for acceptedBrands.
         * @return Builder
         */
        public Builder acceptedBrands(List<String> acceptedBrands) {
            this.acceptedBrands = acceptedBrands;
            return this;
        }

        /**
         * Setter for defaultPaymentMethod.
         * @param  defaultPaymentMethod  String value for defaultPaymentMethod.
         * @return Builder
         */
        public Builder defaultPaymentMethod(String defaultPaymentMethod) {
            this.defaultPaymentMethod = defaultPaymentMethod;
            return this;
        }

        /**
         * Setter for gatewayAffiliationId.
         * @param  gatewayAffiliationId  String value for gatewayAffiliationId.
         * @return Builder
         */
        public Builder gatewayAffiliationId(String gatewayAffiliationId) {
            this.gatewayAffiliationId = gatewayAffiliationId;
            return this;
        }

        /**
         * Setter for creditCard.
         * @param  creditCard  CreateCheckoutCreditCardPaymentRequest value for creditCard.
         * @return Builder
         */
        public Builder creditCard(CreateCheckoutCreditCardPaymentRequest creditCard) {
            this.creditCard = creditCard;
            return this;
        }

        /**
         * Setter for debitCard.
         * @param  debitCard  CreateCheckoutDebitCardPaymentRequest value for debitCard.
         * @return Builder
         */
        public Builder debitCard(CreateCheckoutDebitCardPaymentRequest debitCard) {
            this.debitCard = debitCard;
            return this;
        }

        /**
         * Setter for boleto.
         * @param  boleto  CreateCheckoutBoletoPaymentRequest value for boleto.
         * @return Builder
         */
        public Builder boleto(CreateCheckoutBoletoPaymentRequest boleto) {
            this.boleto = boleto;
            return this;
        }

        /**
         * Setter for customerEditable.
         * @param  customerEditable  Boolean value for customerEditable.
         * @return Builder
         */
        public Builder customerEditable(Boolean customerEditable) {
            this.customerEditable = customerEditable;
            return this;
        }

        /**
         * Setter for expiresIn.
         * @param  expiresIn  Integer value for expiresIn.
         * @return Builder
         */
        public Builder expiresIn(Integer expiresIn) {
            this.expiresIn = expiresIn;
            return this;
        }

        /**
         * Builds a new {@link CreateCheckoutPaymentRequest} object using the set fields.
         * @return {@link CreateCheckoutPaymentRequest}
         */
        public CreateCheckoutPaymentRequest build() {
            return new CreateCheckoutPaymentRequest(acceptedPaymentMethods,
                    acceptedMultiPaymentMethods, successUrl, skipCheckoutSuccessPage,
                    billingAddressEditable, billingAddress, bankTransfer, acceptedBrands,
                    defaultPaymentMethod, gatewayAffiliationId, creditCard, debitCard, boleto,
                    customerEditable, expiresIn);
        }
    }
}
