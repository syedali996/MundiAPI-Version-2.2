/*
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.mundipagg.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.mundipagg.api.ApiHelper;
import com.mundipagg.api.DateTimeHelper;
import com.mundipagg.api.Server;
import com.mundipagg.api.exceptions.ApiException;
import com.mundipagg.api.http.request.HttpMethod;
import com.mundipagg.api.models.CreateAnticipationRequest;
import com.mundipagg.api.models.CreateRecipientRequest;
import com.mundipagg.api.models.CreateTransferRequest;
import com.mundipagg.api.models.CreateWithdrawRequest;
import com.mundipagg.api.models.GetAnticipationLimitResponse;
import com.mundipagg.api.models.GetAnticipationResponse;
import com.mundipagg.api.models.GetBalanceResponse;
import com.mundipagg.api.models.GetRecipientResponse;
import com.mundipagg.api.models.GetTransferResponse;
import com.mundipagg.api.models.GetWithdrawResponse;
import com.mundipagg.api.models.ListAnticipationResponse;
import com.mundipagg.api.models.ListRecipientResponse;
import com.mundipagg.api.models.ListTransferResponse;
import com.mundipagg.api.models.ListWithdrawals;
import com.mundipagg.api.models.UpdateAutomaticAnticipationSettingsRequest;
import com.mundipagg.api.models.UpdateMetadataRequest;
import com.mundipagg.api.models.UpdateRecipientBankAccountRequest;
import com.mundipagg.api.models.UpdateRecipientRequest;
import com.mundipagg.api.models.UpdateTransferSettingsRequest;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.time.LocalDateTime;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DefaultRecipientsController extends BaseController implements RecipientsController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public DefaultRecipientsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Updates recipient metadata.
     * @param  recipientId  Required parameter: Recipient id
     * @param  request  Required parameter: Metadata
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetRecipientResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetRecipientResponse updateRecipientMetadata(
            final String recipientId,
            final UpdateMetadataRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        return prepareUpdateRecipientMetadataRequest(recipientId, request,
                idempotencyKey).execute();
    }

    /**
     * Builds the ApiCall object for updateRecipientMetadata.
     */
    private ApiCall<GetRecipientResponse, ApiException> prepareUpdateRecipientMetadataRequest(
            final String recipientId,
            final UpdateMetadataRequest request,
            final String idempotencyKey) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GetRecipientResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/recipients/{recipient_id}/metadata")
                        .bodyParam(param -> param.value(request))
                        .bodySerializer(() ->  ApiHelper.serialize(request))
                        .templateParam(param -> param.key("recipient_id").value(recipientId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("idempotency-key")
                                .value(idempotencyKey).isRequired(false))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetRecipientResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  recipientId  Required parameter: Recipient Identificator
     * @param  request  Required parameter: Example:
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetRecipientResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetRecipientResponse updateRecipientTransferSettings(
            final String recipientId,
            final UpdateTransferSettingsRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        return prepareUpdateRecipientTransferSettingsRequest(recipientId, request,
                idempotencyKey).execute();
    }

    /**
     * Builds the ApiCall object for updateRecipientTransferSettings.
     */
    private ApiCall<GetRecipientResponse, ApiException> prepareUpdateRecipientTransferSettingsRequest(
            final String recipientId,
            final UpdateTransferSettingsRequest request,
            final String idempotencyKey) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GetRecipientResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/recipients/{recipient_id}/transfer-settings")
                        .bodyParam(param -> param.value(request))
                        .bodySerializer(() ->  ApiHelper.serialize(request))
                        .templateParam(param -> param.key("recipient_id").value(recipientId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("idempotency-key")
                                .value(idempotencyKey).isRequired(false))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetRecipientResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Gets an anticipation.
     * @param  recipientId  Required parameter: Recipient id
     * @param  anticipationId  Required parameter: Anticipation id
     * @return    Returns the GetAnticipationResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAnticipationResponse getAnticipation(
            final String recipientId,
            final String anticipationId) throws ApiException, IOException {
        return prepareGetAnticipationRequest(recipientId, anticipationId).execute();
    }

    /**
     * Builds the ApiCall object for getAnticipation.
     */
    private ApiCall<GetAnticipationResponse, ApiException> prepareGetAnticipationRequest(
            final String recipientId,
            final String anticipationId) throws IOException {
        return new ApiCall.Builder<GetAnticipationResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/recipients/{recipient_id}/anticipations/{anticipation_id}")
                        .templateParam(param -> param.key("recipient_id").value(recipientId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("anticipation_id").value(anticipationId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetAnticipationResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Retrieves paginated recipients information.
     * @param  page  Optional parameter: Page number
     * @param  size  Optional parameter: Page size
     * @return    Returns the ListRecipientResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListRecipientResponse getRecipients(
            final Integer page,
            final Integer size) throws ApiException, IOException {
        return prepareGetRecipientsRequest(page, size).execute();
    }

    /**
     * Builds the ApiCall object for getRecipients.
     */
    private ApiCall<ListRecipientResponse, ApiException> prepareGetRecipientsRequest(
            final Integer page,
            final Integer size) throws IOException {
        return new ApiCall.Builder<ListRecipientResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/recipients")
                        .queryParam(param -> param.key("page")
                                .value(page).isRequired(false))
                        .queryParam(param -> param.key("size")
                                .value(size).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ListRecipientResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Get balance information for a recipient.
     * @param  recipientId  Required parameter: Recipient id
     * @return    Returns the GetBalanceResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetBalanceResponse getBalance(
            final String recipientId) throws ApiException, IOException {
        return prepareGetBalanceRequest(recipientId).execute();
    }

    /**
     * Builds the ApiCall object for getBalance.
     */
    private ApiCall<GetBalanceResponse, ApiException> prepareGetBalanceRequest(
            final String recipientId) throws IOException {
        return new ApiCall.Builder<GetBalanceResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/recipients/{recipient_id}/balance")
                        .templateParam(param -> param.key("recipient_id").value(recipientId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetBalanceResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Retrieves a paginated list of anticipations from a recipient.
     * @param  recipientId  Required parameter: Recipient id
     * @param  page  Optional parameter: Page number
     * @param  size  Optional parameter: Page size
     * @param  status  Optional parameter: Filter for anticipation status
     * @param  timeframe  Optional parameter: Filter for anticipation timeframe
     * @param  paymentDateSince  Optional parameter: Filter for start range for anticipation payment
     *         date
     * @param  paymentDateUntil  Optional parameter: Filter for end range for anticipation payment
     *         date
     * @param  createdSince  Optional parameter: Filter for start range for anticipation creation
     *         date
     * @param  createdUntil  Optional parameter: Filter for end range for anticipation creation date
     * @return    Returns the ListAnticipationResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListAnticipationResponse getAnticipations(
            final String recipientId,
            final Integer page,
            final Integer size,
            final String status,
            final String timeframe,
            final LocalDateTime paymentDateSince,
            final LocalDateTime paymentDateUntil,
            final LocalDateTime createdSince,
            final LocalDateTime createdUntil) throws ApiException, IOException {
        return prepareGetAnticipationsRequest(recipientId, page, size, status, timeframe,
                paymentDateSince, paymentDateUntil, createdSince, createdUntil).execute();
    }

    /**
     * Builds the ApiCall object for getAnticipations.
     */
    private ApiCall<ListAnticipationResponse, ApiException> prepareGetAnticipationsRequest(
            final String recipientId,
            final Integer page,
            final Integer size,
            final String status,
            final String timeframe,
            final LocalDateTime paymentDateSince,
            final LocalDateTime paymentDateUntil,
            final LocalDateTime createdSince,
            final LocalDateTime createdUntil) throws IOException {
        return new ApiCall.Builder<ListAnticipationResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/recipients/{recipient_id}/anticipations")
                        .queryParam(param -> param.key("page")
                                .value(page).isRequired(false))
                        .queryParam(param -> param.key("size")
                                .value(size).isRequired(false))
                        .queryParam(param -> param.key("status")
                                .value(status).isRequired(false))
                        .queryParam(param -> param.key("timeframe")
                                .value(timeframe).isRequired(false))
                        .queryParam(param -> param.key("payment_date_since")
                                .value(DateTimeHelper.toRfc8601DateTime(paymentDateSince)).isRequired(false))
                        .queryParam(param -> param.key("payment_date_until")
                                .value(DateTimeHelper.toRfc8601DateTime(paymentDateUntil)).isRequired(false))
                        .queryParam(param -> param.key("created_since")
                                .value(DateTimeHelper.toRfc8601DateTime(createdSince)).isRequired(false))
                        .queryParam(param -> param.key("created_until")
                                .value(DateTimeHelper.toRfc8601DateTime(createdUntil)).isRequired(false))
                        .templateParam(param -> param.key("recipient_id").value(recipientId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ListAnticipationResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates an anticipation.
     * @param  recipientId  Required parameter: Recipient id
     * @param  request  Required parameter: Anticipation data
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetAnticipationResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAnticipationResponse createAnticipation(
            final String recipientId,
            final CreateAnticipationRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        return prepareCreateAnticipationRequest(recipientId, request, idempotencyKey).execute();
    }

    /**
     * Builds the ApiCall object for createAnticipation.
     */
    private ApiCall<GetAnticipationResponse, ApiException> prepareCreateAnticipationRequest(
            final String recipientId,
            final CreateAnticipationRequest request,
            final String idempotencyKey) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GetAnticipationResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/recipients/{recipient_id}/anticipations")
                        .bodyParam(param -> param.value(request))
                        .bodySerializer(() ->  ApiHelper.serialize(request))
                        .templateParam(param -> param.key("recipient_id").value(recipientId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("idempotency-key")
                                .value(idempotencyKey).isRequired(false))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetAnticipationResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Updates the default bank account from a recipient.
     * @param  recipientId  Required parameter: Recipient id
     * @param  request  Required parameter: Bank account data
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetRecipientResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetRecipientResponse updateRecipientDefaultBankAccount(
            final String recipientId,
            final UpdateRecipientBankAccountRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        return prepareUpdateRecipientDefaultBankAccountRequest(recipientId, request,
                idempotencyKey).execute();
    }

    /**
     * Builds the ApiCall object for updateRecipientDefaultBankAccount.
     */
    private ApiCall<GetRecipientResponse, ApiException> prepareUpdateRecipientDefaultBankAccountRequest(
            final String recipientId,
            final UpdateRecipientBankAccountRequest request,
            final String idempotencyKey) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GetRecipientResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/recipients/{recipient_id}/default-bank-account")
                        .bodyParam(param -> param.value(request))
                        .bodySerializer(() ->  ApiHelper.serialize(request))
                        .templateParam(param -> param.key("recipient_id").value(recipientId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("idempotency-key")
                                .value(idempotencyKey).isRequired(false))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetRecipientResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Retrieves recipient information.
     * @param  recipientId  Required parameter: Recipiend id
     * @return    Returns the GetRecipientResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetRecipientResponse getRecipient(
            final String recipientId) throws ApiException, IOException {
        return prepareGetRecipientRequest(recipientId).execute();
    }

    /**
     * Builds the ApiCall object for getRecipient.
     */
    private ApiCall<GetRecipientResponse, ApiException> prepareGetRecipientRequest(
            final String recipientId) throws IOException {
        return new ApiCall.Builder<GetRecipientResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/recipients/{recipient_id}")
                        .templateParam(param -> param.key("recipient_id").value(recipientId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetRecipientResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Gets the anticipation limits for a recipient.
     * @param  recipientId  Required parameter: Recipient id
     * @param  timeframe  Required parameter: Timeframe
     * @param  paymentDate  Required parameter: Anticipation payment date
     * @return    Returns the GetAnticipationLimitResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetAnticipationLimitResponse getAnticipationLimits(
            final String recipientId,
            final String timeframe,
            final LocalDateTime paymentDate) throws ApiException, IOException {
        return prepareGetAnticipationLimitsRequest(recipientId, timeframe, paymentDate).execute();
    }

    /**
     * Builds the ApiCall object for getAnticipationLimits.
     */
    private ApiCall<GetAnticipationLimitResponse, ApiException> prepareGetAnticipationLimitsRequest(
            final String recipientId,
            final String timeframe,
            final LocalDateTime paymentDate) throws IOException {
        return new ApiCall.Builder<GetAnticipationLimitResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/recipients/{recipient_id}/anticipation_limits")
                        .queryParam(param -> param.key("timeframe")
                                .value(timeframe))
                        .queryParam(param -> param.key("payment_date")
                                .value(DateTimeHelper.toRfc8601DateTime(paymentDate)))
                        .templateParam(param -> param.key("recipient_id").value(recipientId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetAnticipationLimitResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Gets a transfer.
     * @param  recipientId  Required parameter: Recipient id
     * @param  transferId  Required parameter: Transfer id
     * @return    Returns the GetTransferResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetTransferResponse getTransfer(
            final String recipientId,
            final String transferId) throws ApiException, IOException {
        return prepareGetTransferRequest(recipientId, transferId).execute();
    }

    /**
     * Builds the ApiCall object for getTransfer.
     */
    private ApiCall<GetTransferResponse, ApiException> prepareGetTransferRequest(
            final String recipientId,
            final String transferId) throws IOException {
        return new ApiCall.Builder<GetTransferResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/recipients/{recipient_id}/transfers/{transfer_id}")
                        .templateParam(param -> param.key("recipient_id").value(recipientId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("transfer_id").value(transferId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetTransferResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Gets a paginated list of transfers for the recipient.
     * @param  recipientId  Required parameter: Recipient id
     * @param  page  Optional parameter: Page number
     * @param  size  Optional parameter: Page size
     * @param  status  Optional parameter: Filter for transfer status
     * @param  createdSince  Optional parameter: Filter for start range of transfer creation date
     * @param  createdUntil  Optional parameter: Filter for end range of transfer creation date
     * @return    Returns the ListTransferResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListTransferResponse getTransfers(
            final String recipientId,
            final Integer page,
            final Integer size,
            final String status,
            final LocalDateTime createdSince,
            final LocalDateTime createdUntil) throws ApiException, IOException {
        return prepareGetTransfersRequest(recipientId, page, size, status, createdSince,
                createdUntil).execute();
    }

    /**
     * Builds the ApiCall object for getTransfers.
     */
    private ApiCall<ListTransferResponse, ApiException> prepareGetTransfersRequest(
            final String recipientId,
            final Integer page,
            final Integer size,
            final String status,
            final LocalDateTime createdSince,
            final LocalDateTime createdUntil) throws IOException {
        return new ApiCall.Builder<ListTransferResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/recipients/{recipient_id}/transfers")
                        .queryParam(param -> param.key("page")
                                .value(page).isRequired(false))
                        .queryParam(param -> param.key("size")
                                .value(size).isRequired(false))
                        .queryParam(param -> param.key("status")
                                .value(status).isRequired(false))
                        .queryParam(param -> param.key("created_since")
                                .value(DateTimeHelper.toRfc8601DateTime(createdSince)).isRequired(false))
                        .queryParam(param -> param.key("created_until")
                                .value(DateTimeHelper.toRfc8601DateTime(createdUntil)).isRequired(false))
                        .templateParam(param -> param.key("recipient_id").value(recipientId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ListTransferResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Updates a recipient.
     * @param  recipientId  Required parameter: Recipient id
     * @param  request  Required parameter: Recipient data
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetRecipientResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetRecipientResponse updateRecipient(
            final String recipientId,
            final UpdateRecipientRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        return prepareUpdateRecipientRequest(recipientId, request, idempotencyKey).execute();
    }

    /**
     * Builds the ApiCall object for updateRecipient.
     */
    private ApiCall<GetRecipientResponse, ApiException> prepareUpdateRecipientRequest(
            final String recipientId,
            final UpdateRecipientRequest request,
            final String idempotencyKey) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GetRecipientResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/recipients/{recipient_id}")
                        .bodyParam(param -> param.value(request))
                        .bodySerializer(() ->  ApiHelper.serialize(request))
                        .templateParam(param -> param.key("recipient_id").value(recipientId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("idempotency-key")
                                .value(idempotencyKey).isRequired(false))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetRecipientResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a new recipient.
     * @param  request  Required parameter: Recipient data
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetRecipientResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetRecipientResponse createRecipient(
            final CreateRecipientRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        return prepareCreateRecipientRequest(request, idempotencyKey).execute();
    }

    /**
     * Builds the ApiCall object for createRecipient.
     */
    private ApiCall<GetRecipientResponse, ApiException> prepareCreateRecipientRequest(
            final CreateRecipientRequest request,
            final String idempotencyKey) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GetRecipientResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/recipients")
                        .bodyParam(param -> param.value(request))
                        .bodySerializer(() ->  ApiHelper.serialize(request))
                        .headerParam(param -> param.key("idempotency-key")
                                .value(idempotencyKey).isRequired(false))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetRecipientResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a transfer for a recipient.
     * @param  recipientId  Required parameter: Recipient Id
     * @param  request  Required parameter: Transfer data
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetTransferResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetTransferResponse createTransfer(
            final String recipientId,
            final CreateTransferRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        return prepareCreateTransferRequest(recipientId, request, idempotencyKey).execute();
    }

    /**
     * Builds the ApiCall object for createTransfer.
     */
    private ApiCall<GetTransferResponse, ApiException> prepareCreateTransferRequest(
            final String recipientId,
            final CreateTransferRequest request,
            final String idempotencyKey) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GetTransferResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/recipients/{recipient_id}/transfers")
                        .bodyParam(param -> param.value(request))
                        .bodySerializer(() ->  ApiHelper.serialize(request))
                        .templateParam(param -> param.key("recipient_id").value(recipientId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("idempotency-key")
                                .value(idempotencyKey).isRequired(false))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetTransferResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  recipientId  Required parameter: Example:
     * @param  request  Required parameter: Example:
     * @return    Returns the GetWithdrawResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetWithdrawResponse createWithdraw(
            final String recipientId,
            final CreateWithdrawRequest request) throws ApiException, IOException {
        return prepareCreateWithdrawRequest(recipientId, request).execute();
    }

    /**
     * Builds the ApiCall object for createWithdraw.
     */
    private ApiCall<GetWithdrawResponse, ApiException> prepareCreateWithdrawRequest(
            final String recipientId,
            final CreateWithdrawRequest request) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GetWithdrawResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/recipients/{recipient_id}/withdrawals")
                        .bodyParam(param -> param.value(request))
                        .bodySerializer(() ->  ApiHelper.serialize(request))
                        .templateParam(param -> param.key("recipient_id").value(recipientId)
                                .shouldEncode(true))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetWithdrawResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  recipientId  Required parameter: Example:
     * @param  withdrawalId  Required parameter: Example:
     * @return    Returns the GetWithdrawResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetWithdrawResponse getWithdrawById(
            final String recipientId,
            final String withdrawalId) throws ApiException, IOException {
        return prepareGetWithdrawByIdRequest(recipientId, withdrawalId).execute();
    }

    /**
     * Builds the ApiCall object for getWithdrawById.
     */
    private ApiCall<GetWithdrawResponse, ApiException> prepareGetWithdrawByIdRequest(
            final String recipientId,
            final String withdrawalId) throws IOException {
        return new ApiCall.Builder<GetWithdrawResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/recipients/{recipient_id}/withdrawals/{withdrawal_id}")
                        .templateParam(param -> param.key("recipient_id").value(recipientId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("withdrawal_id").value(withdrawalId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetWithdrawResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Gets a paginated list of transfers for the recipient.
     * @param  recipientId  Required parameter: Example:
     * @param  page  Optional parameter: Example:
     * @param  size  Optional parameter: Example:
     * @param  status  Optional parameter: Example:
     * @param  createdSince  Optional parameter: Example:
     * @param  createdUntil  Optional parameter: Example:
     * @return    Returns the ListWithdrawals response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListWithdrawals getWithdrawals(
            final String recipientId,
            final Integer page,
            final Integer size,
            final String status,
            final LocalDateTime createdSince,
            final LocalDateTime createdUntil) throws ApiException, IOException {
        return prepareGetWithdrawalsRequest(recipientId, page, size, status, createdSince,
                createdUntil).execute();
    }

    /**
     * Builds the ApiCall object for getWithdrawals.
     */
    private ApiCall<ListWithdrawals, ApiException> prepareGetWithdrawalsRequest(
            final String recipientId,
            final Integer page,
            final Integer size,
            final String status,
            final LocalDateTime createdSince,
            final LocalDateTime createdUntil) throws IOException {
        return new ApiCall.Builder<ListWithdrawals, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/recipients/{recipient_id}/withdrawals")
                        .queryParam(param -> param.key("page")
                                .value(page).isRequired(false))
                        .queryParam(param -> param.key("size")
                                .value(size).isRequired(false))
                        .queryParam(param -> param.key("status")
                                .value(status).isRequired(false))
                        .queryParam(param -> param.key("created_since")
                                .value(DateTimeHelper.toRfc8601DateTime(createdSince)).isRequired(false))
                        .queryParam(param -> param.key("created_until")
                                .value(DateTimeHelper.toRfc8601DateTime(createdUntil)).isRequired(false))
                        .templateParam(param -> param.key("recipient_id").value(recipientId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ListWithdrawals.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Updates recipient metadata.
     * @param  recipientId  Required parameter: Recipient id
     * @param  request  Required parameter: Metadata
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetRecipientResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetRecipientResponse updateAutomaticAnticipationSettings(
            final String recipientId,
            final UpdateAutomaticAnticipationSettingsRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        return prepareUpdateAutomaticAnticipationSettingsRequest(recipientId, request,
                idempotencyKey).execute();
    }

    /**
     * Builds the ApiCall object for updateAutomaticAnticipationSettings.
     */
    private ApiCall<GetRecipientResponse, ApiException> prepareUpdateAutomaticAnticipationSettingsRequest(
            final String recipientId,
            final UpdateAutomaticAnticipationSettingsRequest request,
            final String idempotencyKey) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GetRecipientResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/recipients/{recipient_id}/automatic-anticipation-settings")
                        .bodyParam(param -> param.value(request))
                        .bodySerializer(() ->  ApiHelper.serialize(request))
                        .templateParam(param -> param.key("recipient_id").value(recipientId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("idempotency-key")
                                .value(idempotencyKey).isRequired(false))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetRecipientResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Retrieves recipient information.
     * @param  code  Required parameter: Recipient code
     * @return    Returns the GetRecipientResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetRecipientResponse getRecipientByCode(
            final String code) throws ApiException, IOException {
        return prepareGetRecipientByCodeRequest(code).execute();
    }

    /**
     * Builds the ApiCall object for getRecipientByCode.
     */
    private ApiCall<GetRecipientResponse, ApiException> prepareGetRecipientByCodeRequest(
            final String code) throws IOException {
        return new ApiCall.Builder<GetRecipientResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/recipients/code/{code}")
                        .templateParam(param -> param.key("code").value(code)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetRecipientResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}