/*
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.mundipagg.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.mundipagg.api.ApiHelper;
import com.mundipagg.api.Server;
import com.mundipagg.api.exceptions.ApiException;
import com.mundipagg.api.http.request.HttpMethod;
import com.mundipagg.api.models.CreateTokenRequest;
import com.mundipagg.api.models.GetTokenResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DefaultTokensController extends BaseController implements TokensController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public DefaultTokensController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * @param  publicKey  Required parameter: Public key
     * @param  request  Required parameter: Request for creating a token
     * @param  idempotencyKey  Optional parameter: Example:
     * @return    Returns the GetTokenResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetTokenResponse createToken(
            final String publicKey,
            final CreateTokenRequest request,
            final String idempotencyKey) throws ApiException, IOException {
        return prepareCreateTokenRequest(publicKey, request, idempotencyKey).execute();
    }

    /**
     * Builds the ApiCall object for createToken.
     */
    private ApiCall<GetTokenResponse, ApiException> prepareCreateTokenRequest(
            final String publicKey,
            final CreateTokenRequest request,
            final String idempotencyKey) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<GetTokenResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tokens?appId={public_key}")
                        .bodyParam(param -> param.value(request))
                        .bodySerializer(() ->  ApiHelper.serialize(request))
                        .templateParam(param -> param.key("public_key").value(publicKey)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("idempotency-key")
                                .value(idempotencyKey).isRequired(false))
                        .headerParam(param ->param.key("content-type").value("application/json"))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetTokenResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Gets a token from its id.
     * @param  id  Required parameter: Token id
     * @param  publicKey  Required parameter: Public key
     * @return    Returns the GetTokenResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public GetTokenResponse getToken(
            final String id,
            final String publicKey) throws ApiException, IOException {
        return prepareGetTokenRequest(id, publicKey).execute();
    }

    /**
     * Builds the ApiCall object for getToken.
     */
    private ApiCall<GetTokenResponse, ApiException> prepareGetTokenRequest(
            final String id,
            final String publicKey) throws IOException {
        return new ApiCall.Builder<GetTokenResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tokens/{id}?appId={public_key}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("public_key").value(publicKey)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, GetTokenResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}