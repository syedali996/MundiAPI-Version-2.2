# -*- coding: utf-8 -*-

"""
pagarmecoreapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmecoreapi.api_helper import APIHelper
from pagarmecoreapi.models.get_price_bracket_response import GetPriceBracketResponse
from pagarmecoreapi.models.get_pricing_scheme_response import GetPricingSchemeResponse


class GetInvoiceItemResponse(object):

    """Implementation of the 'GetInvoiceItemResponse' model.

    Response object for getting an invoice item

    Attributes:
        amount (int): TODO: type description here.
        description (string): TODO: type description here.
        pricing_scheme (GetPricingSchemeResponse): TODO: type description
            here.
        price_bracket (GetPriceBracketResponse): TODO: type description here.
        quantity (int): TODO: type description here.
        name (string): TODO: type description here.
        subscription_item_id (string): Subscription Item Id

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "amount": 'amount',
        "description": 'description',
        "pricing_scheme": 'pricing_scheme',
        "price_bracket": 'price_bracket',
        "subscription_item_id": 'subscription_item_id',
        "quantity": 'quantity',
        "name": 'name'
    }

    _optionals = [
        'quantity',
        'name',
    ]

    def __init__(self,
                 amount=None,
                 description=None,
                 pricing_scheme=None,
                 price_bracket=None,
                 subscription_item_id=None,
                 quantity=APIHelper.SKIP,
                 name=APIHelper.SKIP):
        """Constructor for the GetInvoiceItemResponse class"""

        # Initialize members of the class
        self.amount = amount 
        self.description = description 
        self.pricing_scheme = pricing_scheme 
        self.price_bracket = price_bracket 
        if quantity is not APIHelper.SKIP:
            self.quantity = quantity 
        if name is not APIHelper.SKIP:
            self.name = name 
        self.subscription_item_id = subscription_item_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        amount = dictionary.get("amount") if dictionary.get("amount") else None
        description = dictionary.get("description") if dictionary.get("description") else None
        pricing_scheme = GetPricingSchemeResponse.from_dictionary(dictionary.get('pricing_scheme')) if dictionary.get('pricing_scheme') else None
        price_bracket = GetPriceBracketResponse.from_dictionary(dictionary.get('price_bracket')) if dictionary.get('price_bracket') else None
        subscription_item_id = dictionary.get("subscription_item_id") if dictionary.get("subscription_item_id") else None
        quantity = dictionary.get("quantity") if dictionary.get("quantity") else APIHelper.SKIP
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        # Return an object of this model
        return cls(amount,
                   description,
                   pricing_scheme,
                   price_bracket,
                   subscription_item_id,
                   quantity,
                   name)
