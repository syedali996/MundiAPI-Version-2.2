# pagarme_core_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PagarmeCoreApi
  # OrdersController
  class OrdersController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # Gets all orders
    # @param [Integer] page Optional parameter: Page number
    # @param [Integer] size Optional parameter: Page size
    # @param [String] code Optional parameter: Filter for order's code
    # @param [String] status Optional parameter: Filter for order's status
    # @param [DateTime] created_since Optional parameter: Filter for order's
    # creation date start range
    # @param [DateTime] created_until Optional parameter: Filter for order's
    # creation date end range
    # @param [String] customer_id Optional parameter: Filter for order's
    # customer id
    # @return [ListOrderResponse] response from the API call
    def get_orders(page: nil,
                   size: nil,
                   code: nil,
                   status: nil,
                   created_since: nil,
                   created_until: nil,
                   customer_id: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/orders'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'page' => page,
        'size' => size,
        'code' => code,
        'status' => status,
        'created_since' => created_since,
        'created_until' => created_until,
        'customer_id' => customer_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ListOrderResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [String] order_id Required parameter: Order Id
    # @param [String] item_id Required parameter: Item Id
    # @param [UpdateOrderItemRequest] request Required parameter: Item Model
    # @param [String] idempotency_key Optional parameter: Example:
    # @return [GetOrderItemResponse] response from the API call
    def update_order_item(order_id,
                          item_id,
                          request,
                          idempotency_key: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/orders/{orderId}/items/{itemId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => true },
        'itemId' => { 'value' => item_id, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'idempotency-key' => idempotency_key
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: request.to_json
      )
      BasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      GetOrderItemResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [String] order_id Required parameter: Order Id
    # @param [String] idempotency_key Optional parameter: Example:
    # @return [GetOrderResponse] response from the API call
    def delete_all_order_items(order_id,
                               idempotency_key: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/orders/{orderId}/items'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'idempotency-key' => idempotency_key
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      GetOrderResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [String] order_id Required parameter: Order Id
    # @param [String] item_id Required parameter: Item Id
    # @param [String] idempotency_key Optional parameter: Example:
    # @return [GetOrderItemResponse] response from the API call
    def delete_order_item(order_id,
                          item_id,
                          idempotency_key: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/orders/{orderId}/items/{itemId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => true },
        'itemId' => { 'value' => item_id, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'idempotency-key' => idempotency_key
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      GetOrderItemResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [String] id Required parameter: Order Id
    # @param [UpdateOrderStatusRequest] request Required parameter: Update Order
    # Model
    # @param [String] idempotency_key Optional parameter: Example:
    # @return [GetOrderResponse] response from the API call
    def close_order(id,
                    request,
                    idempotency_key: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/orders/{id}/closed'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'idempotency-key' => idempotency_key
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.patch(
        _query_url,
        headers: _headers,
        parameters: request.to_json
      )
      BasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      GetOrderResponse.from_hash(decoded)
    end

    # Creates a new Order
    # @param [CreateOrderRequest] body Required parameter: Request for creating
    # an order
    # @param [String] idempotency_key Optional parameter: Example:
    # @return [GetOrderResponse] response from the API call
    def create_order(body,
                     idempotency_key: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/orders'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'idempotency-key' => idempotency_key
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      BasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      GetOrderResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [String] order_id Required parameter: Order Id
    # @param [CreateOrderItemRequest] request Required parameter: Order Item
    # Model
    # @param [String] idempotency_key Optional parameter: Example:
    # @return [GetOrderItemResponse] response from the API call
    def create_order_item(order_id,
                          request,
                          idempotency_key: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/orders/{orderId}/items'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'idempotency-key' => idempotency_key
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: request.to_json
      )
      BasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      GetOrderItemResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [String] order_id Required parameter: Order Id
    # @param [String] item_id Required parameter: Item Id
    # @return [GetOrderItemResponse] response from the API call
    def get_order_item(order_id,
                       item_id)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/orders/{orderId}/items/{itemId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => true },
        'itemId' => { 'value' => item_id, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      GetOrderItemResponse.from_hash(decoded)
    end

    # Updates the metadata from an order
    # @param [String] order_id Required parameter: The order id
    # @param [UpdateMetadataRequest] request Required parameter: Request for
    # updating the order metadata
    # @param [String] idempotency_key Optional parameter: Example:
    # @return [GetOrderResponse] response from the API call
    def update_order_metadata(order_id,
                              request,
                              idempotency_key: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/Orders/{order_id}/metadata'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'order_id' => { 'value' => order_id, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8',
        'idempotency-key' => idempotency_key
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.patch(
        _query_url,
        headers: _headers,
        parameters: request.to_json
      )
      BasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      GetOrderResponse.from_hash(decoded)
    end

    # Gets an order
    # @param [String] order_id Required parameter: Order id
    # @return [GetOrderResponse] response from the API call
    def get_order(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/orders/{order_id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'order_id' => { 'value' => order_id, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      GetOrderResponse.from_hash(decoded)
    end
  end
end
