# pagarme_core_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PagarmeCoreApi
  #  pagarme_core_api client class.
  class Client
    attr_reader :config

    # Access to plans controller.
    # @return [PlansController] Returns the controller instance.
    def plans
      @plans ||= PlansController.new config
    end

    # Access to subscriptions controller.
    # @return [SubscriptionsController] Returns the controller instance.
    def subscriptions
      @subscriptions ||= SubscriptionsController.new config
    end

    # Access to invoices controller.
    # @return [InvoicesController] Returns the controller instance.
    def invoices
      @invoices ||= InvoicesController.new config
    end

    # Access to orders controller.
    # @return [OrdersController] Returns the controller instance.
    def orders
      @orders ||= OrdersController.new config
    end

    # Access to customers controller.
    # @return [CustomersController] Returns the controller instance.
    def customers
      @customers ||= CustomersController.new config
    end

    # Access to recipients controller.
    # @return [RecipientsController] Returns the controller instance.
    def recipients
      @recipients ||= RecipientsController.new config
    end

    # Access to charges controller.
    # @return [ChargesController] Returns the controller instance.
    def charges
      @charges ||= ChargesController.new config
    end

    # Access to transfers controller.
    # @return [TransfersController] Returns the controller instance.
    def transfers
      @transfers ||= TransfersController.new config
    end

    # Access to tokens controller.
    # @return [TokensController] Returns the controller instance.
    def tokens
      @tokens ||= TokensController.new config
    end

    # Access to transactions controller.
    # @return [TransactionsController] Returns the controller instance.
    def transactions
      @transactions ||= TransactionsController.new config
    end

    def initialize(connection: nil, adapter: :net_http_persistent, timeout: 60,
                   max_retries: 0, retry_interval: 1, backoff_factor: 2,
                   retry_statuses: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
                   retry_methods: %i[get put],
                   environment: Environment::PRODUCTION,
                   basic_auth_user_name: 'TODO: Replace',
                   basic_auth_password: 'TODO: Replace', config: nil)
      @config = if config.nil?
                  Configuration.new(connection: connection, adapter: adapter,
                                    timeout: timeout, max_retries: max_retries,
                                    retry_interval: retry_interval,
                                    backoff_factor: backoff_factor,
                                    retry_statuses: retry_statuses,
                                    retry_methods: retry_methods,
                                    environment: environment,
                                    basic_auth_user_name: basic_auth_user_name,
                                    basic_auth_password: basic_auth_password)
                else
                  config
                end
    end
  end
end
